{"version":3,"file":"index-umd.min.js","sources":["../node_modules/kld-affine/lib/Point2D.js","../node_modules/kld-affine/lib/Vector2D.js","../node_modules/kld-affine/lib/Matrix2D.js","../node_modules/kld-polynomial/lib/Polynomial.js","../node_modules/gp-data-transformer/lib/GeneratedParser.js","../node_modules/gp-data-transformer/lib/StandardLibrary.js","../node_modules/gp-data-transformer/lib/Transformer.js","../node_modules/kld-path-parser/lib/PathLexeme.js","../node_modules/kld-path-parser/lib/PathLexer.js","../node_modules/kld-path-parser/lib/PathParser.js","../lib/PathHandler.js","../lib/ShapeInfo.js","../lib/Intersection.js","../lib/Shapes.js","../lib/AffineShapes.js","../lib/SvgShapes.js","../lib/IntersectionQuery.js"],"sourcesContent":["/**\n *  Point2D.js\n *  @module Point2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Point2D\n *\n *  @memberof module:kld-affine\n */\nclass Point2D {\n    /**\n     *  Point2D\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @returns {module:kld-affine.Point2D}\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     *  clone\n     *\n     *  @returns {module:kld-affine.Point2D}\n     */\n    clone() {\n        return new this.constructor(this.x, this.y);\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {module:kld-affine.Point2D}\n     */\n    add(that) {\n        return new this.constructor(this.x + that.x, this.y + that.y);\n    }\n\n    /**\n     *  subtract\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {module:kld-affine.Point2D}\n     */\n    subtract(that) {\n        return new this.constructor(this.x - that.x, this.y - that.y);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Point2D}\n     */\n    multiply(scalar) {\n        return new this.constructor(this.x * scalar, this.y * scalar);\n    }\n\n    /**\n     *  divide\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Point2D}\n     */\n    divide(scalar) {\n        return new this.constructor(this.x / scalar, this.y / scalar);\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (this.x === that.x && this.y === that.y);\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.x - that.x) < precision &&\n            Math.abs(this.y - that.y) < precision\n        );\n    }\n\n    // utility methods\n\n    /**\n     *  lerp\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @param {number} t\n     *  @returns {module:kld-affine.Point2D}\n     */\n    lerp(that, t) {\n        const omt = 1.0 - t;\n\n        return new this.constructor(\n            this.x * omt + that.x * t,\n            this.y * omt + that.y * t\n        );\n    }\n\n    /**\n     *  distanceFrom\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    distanceFrom(that) {\n        const dx = this.x - that.x;\n        const dy = this.y - that.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     *  min\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    min(that) {\n        return new this.constructor(\n            Math.min(this.x, that.x),\n            Math.min(this.y, that.y)\n        );\n    }\n\n    /**\n     *  max\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    max(that) {\n        return new this.constructor(\n            Math.max(this.x, that.x),\n            Math.max(this.y, that.y)\n        );\n    }\n\n    /**\n     *  transform\n     *\n     *  @param {module:kld-affine.Matrix2D} matrix\n     *  @returns {module:kld-affine.Point2D}\n     */\n    transform(matrix) {\n        return new this.constructor(\n            matrix.a * this.x + matrix.c * this.y + matrix.e,\n            matrix.b * this.x + matrix.d * this.y + matrix.f\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `point(${this.x},${this.y})`;\n    }\n}\n\nexport default Point2D;\n","/**\n *  Vector2D.js\n *  @module Vector2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Vector2D\n *\n *  @memberof module:kld-affine\n */\nclass Vector2D {\n    /**\n     *  Vector2D\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     *  fromPoints\n     *\n     *  @param {module:kld-affine.Point2D} p1\n     *  @param {module:kld-affine.Point2D} p2\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    static fromPoints(p1, p2) {\n        return new Vector2D(\n            p2.x - p1.x,\n            p2.y - p1.y\n        );\n    }\n\n    /**\n     *  length\n     *\n     *  @returns {number}\n     */\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    /**\n     *  magnitude\n     *\n     *  @returns {number}\n     */\n    magnitude() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    /**\n     *  dot\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    dot(that) {\n        return this.x * that.x + this.y * that.y;\n    }\n\n    /**\n     *  cross\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    cross(that) {\n        return this.x * that.y - this.y * that.x;\n    }\n\n    /**\n     *  determinant\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    determinant(that) {\n        return this.x * that.y - this.y * that.x;\n    }\n\n    /**\n     *  unit\n     *\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    unit() {\n        return this.divide(this.length());\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    add(that) {\n        return new this.constructor(this.x + that.x, this.y + that.y);\n    }\n\n    /**\n     *  subtract\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    subtract(that) {\n        return new this.constructor(this.x - that.x, this.y - that.y);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    multiply(scalar) {\n        return new this.constructor(this.x * scalar, this.y * scalar);\n    }\n\n    /**\n     *  divide\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    divide(scalar) {\n        return new this.constructor(this.x / scalar, this.y / scalar);\n    }\n\n    /**\n     *  angleBetween\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    angleBetween(that) {\n        let cos = this.dot(that) / (this.length() * that.length());\n        cos = Math.max(-1, Math.min(cos, 1));\n        const radians = Math.acos(cos);\n\n        return (this.cross(that) < 0.0) ? -radians : radians;\n    }\n\n    /**\n     *  Find a vector is that is perpendicular to this vector\n     *\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    perp() {\n        return new this.constructor(-this.y, this.x);\n    }\n\n    /**\n     *  Find the component of the specified vector that is perpendicular to\n     *  this vector\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    perpendicular(that) {\n        return this.subtract(this.project(that));\n    }\n\n    /**\n     *  project\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    project(that) {\n        const percent = this.dot(that) / that.dot(that);\n\n        return that.multiply(percent);\n    }\n\n    /**\n     *  transform\n     *\n     *  @param {module:kld-affine.Matrix2D} matrix\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    transform(matrix) {\n        return new this.constructor(\n            matrix.a * this.x + matrix.c * this.y,\n            matrix.b * this.x + matrix.d * this.y\n        );\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (\n            this.x === that.x &&\n            this.y === that.y\n        );\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.x - that.x) < precision &&\n            Math.abs(this.y - that.y) < precision\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `vector(${this.x},${this.y})`;\n    }\n}\n\nexport default Vector2D;\n","/**\n *  Matrix2D.js\n *  @module Matrix2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Matrix2D\n *\n *  @memberof module:kld-affine\n */\nclass Matrix2D {\n    /**\n     *  A 2D Matrix of the form:<br>\n     *  [a c e]<br>\n     *  [b d f]<br>\n     *  [0 0 1]<br>\n     *\n     *  @param {number} a\n     *  @param {number} b\n     *  @param {number} c\n     *  @param {number} d\n     *  @param {number} e\n     *  @param {number} f\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, e = 0, f = 0) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.e = e;\n        this.f = f;\n    }\n\n    /**\n     *  translation\n     *\n     *  @param {number} tx\n     *  @param {number} ty\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static translation(tx, ty) {\n        return new Matrix2D(1, 0, 0, 1, tx, ty);\n    }\n\n    /**\n     *  scaling\n     *\n     *  @param {number} scale\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static scaling(scale) {\n        return new Matrix2D(scale, 0, 0, scale, 0, 0);\n    }\n\n    /**\n     *  scalingAt\n     *\n     *  @param {number} scale\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static scalingAt(scale, center) {\n        return new Matrix2D(\n            scale,\n            0,\n            0,\n            scale,\n            center.x - center.x * scale,\n            center.y - center.y * scale\n        );\n    }\n\n    /**\n     *  nonUniformScaling\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static nonUniformScaling(scaleX, scaleY) {\n        return new Matrix2D(scaleX, 0, 0, scaleY, 0, 0);\n    }\n\n    /**\n     *  nonUniformScalingAt\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static nonUniformScalingAt(scaleX, scaleY, center) {\n        return new Matrix2D(\n            scaleX,\n            0,\n            0,\n            scaleY,\n            center.x - center.x * scaleX,\n            center.y - center.y * scaleY\n        );\n    }\n\n    /**\n     *  rotation\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotation(radians) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new Matrix2D(c, s, -s, c, 0, 0);\n    }\n\n    /**\n     *  rotationAt\n     *\n     *  @param {number} radians\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotationAt(radians, center) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new Matrix2D(\n            c,\n            s,\n            -s,\n            c,\n            center.x - center.x * c + center.y * s,\n            center.y - center.y * c - center.x * s\n        );\n    }\n\n    /**\n     *  rotationFromVector\n     *\n     *  @param {module:kld-affine.Vector2D} vector\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotationFromVector(vector) {\n        const unit = vector.unit();\n        const c = unit.x; // cos\n        const s = unit.y; // sin\n\n        return new Matrix2D(c, s, -s, c, 0, 0);\n    }\n\n    /**\n     *  xFlip\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static xFlip() {\n        return new Matrix2D(-1, 0, 0, 1, 0, 0);\n    }\n\n    /**\n     *  yFlip\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static yFlip() {\n        return new Matrix2D(1, 0, 0, -1, 0, 0);\n    }\n\n    /**\n     *  xSkew\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static xSkew(radians) {\n        const t = Math.tan(radians);\n\n        return new Matrix2D(1, 0, t, 1, 0, 0);\n    }\n\n    /**\n     *  ySkew\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static ySkew(radians) {\n        const t = Math.tan(radians);\n\n        return new Matrix2D(1, t, 0, 1, 0, 0);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    multiply(that) {\n        if (this.isIdentity()) {\n            return that;\n        }\n\n        if (that.isIdentity()) {\n            return this;\n        }\n\n        return new this.constructor(\n            this.a * that.a + this.c * that.b,\n            this.b * that.a + this.d * that.b,\n            this.a * that.c + this.c * that.d,\n            this.b * that.c + this.d * that.d,\n            this.a * that.e + this.c * that.f + this.e,\n            this.b * that.e + this.d * that.f + this.f\n        );\n    }\n\n    /**\n     *  inverse\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    inverse() {\n        if (this.isIdentity()) {\n            return this;\n        }\n\n        const det1 = this.a * this.d - this.b * this.c;\n\n        if (det1 === 0.0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n\n        const idet = 1.0 / det1;\n        const det2 = this.f * this.c - this.e * this.d;\n        const det3 = this.e * this.b - this.f * this.a;\n\n        return new this.constructor(\n            this.d * idet,\n            -this.b * idet,\n            -this.c * idet,\n            this.a * idet,\n            det2 * idet,\n            det3 * idet\n        );\n    }\n\n    /**\n     *  translate\n     *\n     *  @param {number} tx\n     *  @param {number} ty\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    translate(tx, ty) {\n        return new this.constructor(\n            this.a,\n            this.b,\n            this.c,\n            this.d,\n            this.a * tx + this.c * ty + this.e,\n            this.b * tx + this.d * ty + this.f\n        );\n    }\n\n    /**\n     *  scale\n     *\n     *  @param {number} scale\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scale(scale) {\n        return new this.constructor(\n            this.a * scale,\n            this.b * scale,\n            this.c * scale,\n            this.d * scale,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  scaleAt\n     *\n     *  @param {number} scale\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleAt(scale, center) {\n        const dx = center.x - scale * center.x;\n        const dy = center.y - scale * center.y;\n\n        return new this.constructor(\n            this.a * scale,\n            this.b * scale,\n            this.c * scale,\n            this.d * scale,\n            this.a * dx + this.c * dy + this.e,\n            this.b * dx + this.d * dy + this.f\n        );\n    }\n\n    /**\n     *  scaleNonUniform\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleNonUniform(scaleX, scaleY) {\n        return new this.constructor(\n            this.a * scaleX,\n            this.b * scaleX,\n            this.c * scaleY,\n            this.d * scaleY,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  scaleNonUniformAt\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleNonUniformAt(scaleX, scaleY, center) {\n        const dx = center.x - scaleX * center.x;\n        const dy = center.y - scaleY * center.y;\n\n        return new this.constructor(\n            this.a * scaleX,\n            this.b * scaleX,\n            this.c * scaleY,\n            this.d * scaleY,\n            this.a * dx + this.c * dy + this.e,\n            this.b * dx + this.d * dy + this.f\n        );\n    }\n\n    /**\n     *  rotate\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotate(radians) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new this.constructor(\n            this.a * c + this.c * s,\n            this.b * c + this.d * s,\n            this.a * -s + this.c * c,\n            this.b * -s + this.d * c,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  rotateAt\n     *\n     *  @param {number} radians\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotateAt(radians, center) {\n        const cos = Math.cos(radians);\n        const sin = Math.sin(radians);\n        const cx = center.x;\n        const cy = center.y;\n\n        const a = this.a * cos + this.c * sin;\n        const b = this.b * cos + this.d * sin;\n        const c = this.c * cos - this.a * sin;\n        const d = this.d * cos - this.b * sin;\n\n        return new this.constructor(\n            a,\n            b,\n            c,\n            d,\n            (this.a - a) * cx + (this.c - c) * cy + this.e,\n            (this.b - b) * cx + (this.d - d) * cy + this.f\n        );\n    }\n\n    /**\n     *  rotateFromVector\n     *\n     *  @param {module:kld-affine.Vector2D} vector\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotateFromVector(vector) {\n        const unit = vector.unit();\n        const c = unit.x; // cos\n        const s = unit.y; // sin\n\n        return new this.constructor(\n            this.a * c + this.c * s,\n            this.b * c + this.d * s,\n            this.a * -s + this.c * c,\n            this.b * -s + this.d * c,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  flipX\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    flipX() {\n        return new this.constructor(\n            -this.a,\n            -this.b,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  flipY\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    flipY() {\n        return new this.constructor(\n            this.a,\n            this.b,\n            -this.c,\n            -this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  skewX\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    skewX(radians) {\n        const t = Math.tan(radians);\n\n        return new this.constructor(\n            this.a,\n            this.b,\n            this.c + this.a * t,\n            this.d + this.b * t,\n            this.e,\n            this.f\n        );\n    }\n\n    // TODO: skewXAt\n\n    /**\n     *  skewY\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    skewY(radians) {\n        const t = Math.tan(radians);\n\n        return new this.constructor(\n            this.a + this.c * t,\n            this.b + this.d * t,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    // TODO: skewYAt\n\n    /**\n     *  isIdentity\n     *\n     *  @returns {boolean}\n     */\n    isIdentity() {\n        return (\n            this.a === 1.0 &&\n            this.b === 0.0 &&\n            this.c === 0.0 &&\n            this.d === 1.0 &&\n            this.e === 0.0 &&\n            this.f === 0.0\n        );\n    }\n\n    /**\n     *  isInvertible\n     *\n     *  @returns {boolean}\n     */\n    isInvertible() {\n        return this.a * this.d - this.b * this.c !== 0.0;\n    }\n\n    /**\n     *  getScale\n     *\n     *  @returns {{ scaleX: number, scaleY: number }}\n     */\n    getScale() {\n        return {\n            scaleX: Math.sqrt(this.a * this.a + this.c * this.c),\n            scaleY: Math.sqrt(this.b * this.b + this.d * this.d)\n        };\n    }\n\n    /**\n     *  Calculates matrix Singular Value Decomposition\n     *\n     *  The resulting matrices — translation, rotation, scale, and rotation0 — return\n     *  this matrix when they are multiplied together in the listed order\n     *\n     *  @see Jim Blinn's article {@link http://dx.doi.org/10.1109/38.486688}\n     *  @see {@link http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation}\n     *\n     *  @returns {{\n     *    translation: module:kld-affine.Matrix2D,\n     *    rotation: module:kld-affine.Matrix2D,\n     *    scale: module:kld-affine.Matrix2D,\n     *    rotation0: module:kld-affine.Matrix2D\n     *  }}\n     */\n    getDecomposition() {\n        const E = (this.a + this.d) * 0.5;\n        const F = (this.a - this.d) * 0.5;\n        const G = (this.b + this.c) * 0.5;\n        const H = (this.b - this.c) * 0.5;\n\n        const Q = Math.sqrt(E * E + H * H);\n        const R = Math.sqrt(F * F + G * G);\n        const scaleX = Q + R;\n        const scaleY = Q - R;\n\n        const a1 = Math.atan2(G, F);\n        const a2 = Math.atan2(H, E);\n        const theta = (a2 - a1) * 0.5;\n        const phi = (a2 + a1) * 0.5;\n\n        return {\n            translation: this.constructor.translation(this.e, this.f),\n            rotation: this.constructor.rotation(phi),\n            scale: this.constructor.nonUniformScaling(scaleX, scaleY),\n            rotation0: this.constructor.rotation(theta)\n        };\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (\n            this.a === that.a &&\n            this.b === that.b &&\n            this.c === that.c &&\n            this.d === that.d &&\n            this.e === that.e &&\n            this.f === that.f\n        );\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.a - that.a) < precision &&\n            Math.abs(this.b - that.b) < precision &&\n            Math.abs(this.c - that.c) < precision &&\n            Math.abs(this.d - that.d) < precision &&\n            Math.abs(this.e - that.e) < precision &&\n            Math.abs(this.f - that.f) < precision\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `matrix(${this.a},${this.b},${this.c},${this.d},${this.e},${this.f})`;\n    }\n}\n\n/**\n *  Identity matrix\n *\n *  @returns {module:kld-affine.Matrix2D}\n */\nMatrix2D.IDENTITY = new Matrix2D();\nMatrix2D.IDENTITY.isIdentity = () => true;\n\n\nexport default Matrix2D;\n","/* eslint-disable camelcase */\n/**\n *  Polynomial.js\n *\n *  @module Polynomial\n *  @copyright 2002-2019 Kevin Lindsey<br>\n *  -<br>\n *  Contribution {@link http://github.com/Quazistax/kld-polynomial}<br>\n *  copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com><br>\n *  MIT license\n */\n\n/**\n *  Sign of a number (+1, -1, +0, -0).\n *\n *  @param {number} x\n *  @returns {number}\n */\nfunction sign(x) {\n    // eslint-disable-next-line no-self-compare\n    return typeof x === \"number\" ? x ? x < 0 ? -1 : 1 : x === x ? x : NaN : NaN;\n}\n\n/**\n *  Polynomial\n *\n *  @memberof module:kld-polynomial\n */\nclass Polynomial {\n    /**\n     *  Polynomial\n     *\n     *  @param {Array<number>} coefs\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    constructor(...coefs) {\n        this.coefs = [];\n\n        for (let i = coefs.length - 1; i >= 0; i--) {\n            this.coefs.push(coefs[i]);\n        }\n\n        this._variable = \"t\";\n        this._s = 0;\n    }\n\n    /**\n     *  Based on polint in \"Numerical Recipes in C, 2nd Edition\", pages 109-110\n     *\n     *  @param {Array<number>} xs\n     *  @param {Array<number>} ys\n     *  @param {number} n\n     *  @param {number} offset\n     *  @param {number} x\n     *\n     *  @returns {{y: number, dy: number}}\n     */\n    static interpolate(xs, ys, n, offset, x) {\n        if (xs.constructor !== Array || ys.constructor !== Array) {\n            throw new TypeError(\"xs and ys must be arrays\");\n        }\n        if (isNaN(n) || isNaN(offset) || isNaN(x)) {\n            throw new TypeError(\"n, offset, and x must be numbers\");\n        }\n\n        let i, y;\n        let dy = 0;\n        const c = new Array(n);\n        const d = new Array(n);\n        let ns = 0;\n\n        let diff = Math.abs(x - xs[offset]);\n\n        for (i = 0; i < n; i++) {\n            const dift = Math.abs(x - xs[offset + i]);\n\n            if (dift < diff) {\n                ns = i;\n                diff = dift;\n            }\n            c[i] = d[i] = ys[offset + i];\n        }\n\n        y = ys[offset + ns];\n        ns--;\n\n        for (let m = 1; m < n; m++) {\n            for (i = 0; i < n - m; i++) {\n                const ho = xs[offset + i] - x;\n                const hp = xs[offset + i + m] - x;\n                const w = c[i + 1] - d[i];\n                let den = ho - hp;\n\n                if (den === 0.0) {\n                    throw new RangeError(\"Unable to interpolate polynomial. Two numbers in n were identical (to within roundoff)\");\n                }\n\n                den = w / den;\n                d[i] = hp * den;\n                c[i] = ho * den;\n            }\n\n            dy = (2 * (ns + 1) < (n - m)) ? c[ns + 1] : d[ns--];\n            y += dy;\n        }\n\n        return {y, dy};\n    }\n\n    /**\n     *  Newton's (Newton-Raphson) method for finding Real roots on univariate function. <br/>\n     *  When using bounds, algorithm falls back to secant if newton goes out of range.\n     *  Bisection is fallback for secant when determined secant is not efficient enough.\n     *  @see {@link http://en.wikipedia.org/wiki/Newton%27s_method}\n     *  @see {@link http://en.wikipedia.org/wiki/Secant_method}\n     *  @see {@link http://en.wikipedia.org/wiki/Bisection_method}\n     *\n     *  @param {number} x0 - Initial root guess\n     *  @param {Function} f - Function which root we are trying to find\n     *  @param {Function} df - Derivative of function f\n     *  @param {number} max_iterations - Maximum number of algorithm iterations\n     *  @param {number} [min] - Left bound value\n     *  @param {number} [max] - Right bound value\n     *  @returns {number} root\n     */\n    static newtonSecantBisection(x0, f, df, max_iterations, min, max) {\n        let x, prev_dfx = 0, dfx, prev_x_ef_correction = 0, x_correction, x_new;\n        let y, y_atmin, y_atmax;\n\n        x = x0;\n\n        const ACCURACY = 14;\n        const min_correction_factor = Math.pow(10, -ACCURACY);\n        const isBounded = (typeof min === \"number\" && typeof max === \"number\");\n\n        if (isBounded) {\n            if (min > max) {\n                throw new RangeError(\"Min must be greater than max\");\n            }\n\n            y_atmin = f(min);\n            y_atmax = f(max);\n\n            if (sign(y_atmin) === sign(y_atmax)) {\n                throw new RangeError(\"Y values of bounds must be of opposite sign\");\n            }\n        }\n\n        const isEnoughCorrection = function() {\n            // stop if correction is too small or if correction is in simple loop\n            return (Math.abs(x_correction) <= min_correction_factor * Math.abs(x)) ||\n                (prev_x_ef_correction === (x - x_correction) - x);\n        };\n\n        for (let i = 0; i < max_iterations; i++) {\n            dfx = df(x);\n\n            if (dfx === 0) {\n                if (prev_dfx === 0) {\n                    // error\n                    throw new RangeError(\"df(x) is zero\");\n                }\n                else {\n                    // use previous derivation value\n                    dfx = prev_dfx;\n                }\n                // or move x a little?\n                // dfx = df(x != 0 ? x + x * 1e-15 : 1e-15);\n            }\n\n            prev_dfx = dfx;\n            y = f(x);\n            x_correction = y / dfx;\n            x_new = x - x_correction;\n\n            if (isEnoughCorrection()) {\n                break;\n            }\n\n            if (isBounded) {\n                if (sign(y) === sign(y_atmax)) {\n                    max = x;\n                    y_atmax = y;\n                }\n                else if (sign(y) === sign(y_atmin)) {\n                    min = x;\n                    y_atmin = y;\n                }\n                else {\n                    x = x_new;\n                    break;\n                }\n\n                if ((x_new < min) || (x_new > max)) {\n                    if (sign(y_atmin) === sign(y_atmax)) {\n                        break;\n                    }\n\n                    const RATIO_LIMIT = 50;\n                    const AIMED_BISECT_OFFSET = 0.25; // [0, 0.5)\n                    const dy = y_atmax - y_atmin;\n                    const dx = max - min;\n\n                    if (dy === 0) {\n                        x_correction = x - (min + dx * 0.5);\n                    }\n                    else if (Math.abs(dy / Math.min(y_atmin, y_atmax)) > RATIO_LIMIT) {\n                        x_correction = x - (min + dx * (0.5 + (Math.abs(y_atmin) < Math.abs(y_atmax) ? -AIMED_BISECT_OFFSET : AIMED_BISECT_OFFSET)));\n                    }\n                    else {\n                        x_correction = x - (min - y_atmin / dy * dx);\n                    }\n                    x_new = x - x_correction;\n\n                    if (isEnoughCorrection()) {\n                        break;\n                    }\n                }\n            }\n\n            prev_x_ef_correction = x - x_new;\n            x = x_new;\n        }\n\n        return x;\n    }\n\n    /**\n     *  Clones this polynomial and return the clone.\n     *\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    clone() {\n        const poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice();\n\n        return poly;\n    }\n\n    /**\n     *  eval\n     *\n     *  @param {number} x\n     */\n    eval(x) {\n        if (isNaN(x)) {\n            throw new TypeError(`Parameter must be a number. Found '${x}'`);\n        }\n\n        let result = 0;\n\n        for (let i = this.coefs.length - 1; i >= 0; i--) {\n            result = result * x + this.coefs[i];\n        }\n\n        return result;\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-polynomial.Polynomial} that\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    add(that) {\n        const result = new Polynomial();\n        const d1 = this.getDegree();\n        const d2 = that.getDegree();\n        const dmax = Math.max(d1, d2);\n\n        for (let i = 0; i <= dmax; i++) {\n            const v1 = (i <= d1) ? this.coefs[i] : 0;\n            const v2 = (i <= d2) ? that.coefs[i] : 0;\n\n            result.coefs[i] = v1 + v2;\n        }\n\n        return result;\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {module:kld-polynomial.Polynomial} that\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    multiply(that) {\n        const result = new Polynomial();\n\n        for (let i = 0; i <= this.getDegree() + that.getDegree(); i++) {\n            result.coefs.push(0);\n        }\n\n        for (let i = 0; i <= this.getDegree(); i++) {\n            for (let j = 0; j <= that.getDegree(); j++) {\n                result.coefs[i + j] += this.coefs[i] * that.coefs[j];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  divideEqualsScalar\n     *\n     *  @deprecated To be replaced by divideScalar\n     *  @param {number} scalar\n     */\n    divideEqualsScalar(scalar) {\n        for (let i = 0; i < this.coefs.length; i++) {\n            this.coefs[i] /= scalar;\n        }\n    }\n\n    /**\n     *  simplifyEquals\n     *\n     *  @deprecated To be replaced by simplify\n     *  @param {number} TOLERANCE\n     */\n    simplifyEquals(TOLERANCE = 1e-12) {\n        for (let i = this.getDegree(); i >= 0; i--) {\n            if (Math.abs(this.coefs[i]) <= TOLERANCE) {\n                this.coefs.pop();\n            }\n            else {\n                break;\n            }\n        }\n    }\n\n    /**\n     *  Sets small coefficients to zero.\n     *\n     *  @deprecated To be replaced by removeZeros\n     *  @param {number} TOLERANCE\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    removeZerosEquals(TOLERANCE = 1e-15) {\n        const c = this.coefs;\n        const err = 10 * TOLERANCE * Math.abs(\n            c.reduce((pv, cv) => {\n                return Math.abs(cv) > Math.abs(pv) ? cv : pv;\n            })\n        );\n\n        for (let i = 0; i < c.length - 1; i++) {\n            if (Math.abs(c[i]) < err) {\n                c[i] = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     *  Scales polynomial so that leading coefficient becomes 1.\n     *\n     *  @deprecated To be replaced by getMonic\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    monicEquals() {\n        const c = this.coefs;\n\n        if (c[c.length - 1] !== 1) {\n            this.divideEqualsScalar(c[c.length - 1]);\n        }\n\n        return this;\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        const coefs = [];\n        const signs = [];\n\n        for (let i = this.coefs.length - 1; i >= 0; i--) {\n            let value = Math.round(this.coefs[i] * 1000) / 1000;\n\n            if (value !== 0) {\n                const signString = (value < 0) ? \" - \" : \" + \";\n\n                value = Math.abs(value);\n\n                if (i > 0) {\n                    if (value === 1) {\n                        value = this._variable;\n                    }\n                    else {\n                        value += this._variable;\n                    }\n                }\n\n                if (i > 1) {\n                    value += \"^\" + i;\n                }\n\n                signs.push(signString);\n                coefs.push(value);\n            }\n        }\n\n        signs[0] = (signs[0] === \" + \") ? \"\" : \"-\";\n\n        let result = \"\";\n\n        for (let i = 0; i < coefs.length; i++) {\n            result += signs[i] + coefs[i];\n        }\n\n        return result;\n    }\n\n    /**\n     *  bisection\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @param {number} [TOLERANCE]\n     *  @param {number} [ACCURACY]\n     *  @returns {number}\n     */\n    bisection(min, max, TOLERANCE = 1e-6, ACCURACY = 15) {\n        let minValue = this.eval(min);\n        let maxValue = this.eval(max);\n        let result;\n\n        if (Math.abs(minValue) <= TOLERANCE) {\n            result = min;\n        }\n        else if (Math.abs(maxValue) <= TOLERANCE) {\n            result = max;\n        }\n        else if (minValue * maxValue <= 0) {\n            const tmp1 = Math.log(max - min);\n            const tmp2 = Math.LN10 * ACCURACY;\n            const maxIterations = Math.ceil((tmp1 + tmp2) / Math.LN2);\n\n            for (let i = 0; i < maxIterations; i++) {\n                result = 0.5 * (min + max);\n                const value = this.eval(result);\n\n                if (Math.abs(value) <= TOLERANCE) {\n                    break;\n                }\n\n                if (value * minValue < 0) {\n                    max = result;\n                    maxValue = value;\n                }\n                else {\n                    min = result;\n                    minValue = value;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 137\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @param {number} n\n     *  @returns {number}\n     */\n    trapezoid(min, max, n) {\n        if (isNaN(min) || isNaN(max) || isNaN(n)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const range = max - min;\n\n        if (n === 1) {\n            const minValue = this.eval(min);\n            const maxValue = this.eval(max);\n\n            this._s = 0.5 * range * (minValue + maxValue);\n        }\n        else {\n            const iter = 1 << (n - 2);\n            const delta = range / iter;\n            let x = min + 0.5 * delta;\n            let sum = 0;\n\n            for (let i = 0; i < iter; i++) {\n                sum += this.eval(x);\n                x += delta;\n            }\n\n            this._s = 0.5 * (this._s + range * sum / iter);\n        }\n\n        if (isNaN(this._s)) {\n            throw new TypeError(\"this._s is NaN\");\n        }\n\n        return this._s;\n    }\n\n    /**\n     *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 139\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {number}\n     */\n    simpson(min, max) {\n        if (isNaN(min) || isNaN(max)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const range = max - min;\n        let st = 0.5 * range * (this.eval(min) + this.eval(max));\n        let t = st;\n        let s = 4.0 * st / 3.0;\n        let os = s;\n        let ost = st;\n        const TOLERANCE = 1e-7;\n\n        let iter = 1;\n\n        for (let n = 2; n <= 20; n++) {\n            const delta = range / iter;\n            let x = min + 0.5 * delta;\n            let sum = 0;\n\n            for (let i = 1; i <= iter; i++) {\n                sum += this.eval(x);\n                x += delta;\n            }\n\n            t = 0.5 * (t + range * sum / iter);\n            st = t;\n            s = (4.0 * st - ost) / 3.0;\n\n            if (Math.abs(s - os) < TOLERANCE * Math.abs(os)) {\n                break;\n            }\n\n            os = s;\n            ost = st;\n            iter <<= 1;\n        }\n\n        return s;\n    }\n\n    /**\n     *  romberg\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {number}\n     */\n    romberg(min, max) {\n        if (isNaN(min) || isNaN(max)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const MAX = 20;\n        const K = 3;\n        const TOLERANCE = 1e-6;\n        const s = new Array(MAX + 1);\n        const h = new Array(MAX + 1);\n        let result = {y: 0, dy: 0};\n\n        h[0] = 1.0;\n\n        for (let j = 1; j <= MAX; j++) {\n            s[j - 1] = this.trapezoid(min, max, j);\n\n            if (j >= K) {\n                result = Polynomial.interpolate(h, s, K, j - K, 0.0);\n                if (Math.abs(result.dy) <= TOLERANCE * result.y) {\n                    break;\n                }\n            }\n\n            s[j] = s[j - 1];\n            h[j] = 0.25 * h[j - 1];\n        }\n\n        return result.y;\n    }\n\n    /**\n     *  Estimate what is the maximum polynomial evaluation error value under which polynomial evaluation could be in fact 0.\n     *\n     *  @param {number} maxAbsX\n     *  @returns {number}\n     */\n    zeroErrorEstimate(maxAbsX) {\n        const poly = this;\n        const ERRF = 1e-15;\n\n        if (typeof maxAbsX === \"undefined\") {\n            const rb = poly.bounds();\n\n            maxAbsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n        }\n\n        if (maxAbsX < 0.001) {\n            return 2 * Math.abs(poly.eval(ERRF));\n        }\n\n        const n = poly.coefs.length - 1;\n        const an = poly.coefs[n];\n\n        return 10 * ERRF * poly.coefs.reduce((m, v, i) => {\n            const nm = v / an * Math.pow(maxAbsX, i);\n            return nm > m ? nm : m;\n        }, 0);\n    }\n\n    /**\n     *  Calculates upper Real roots bounds. <br/>\n     *  Real roots are in interval [negX, posX]. Determined by Fujiwara method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ negX: number, posX: number }}\n     */\n    boundsUpperRealFujiwara() {\n        let a = this.coefs;\n        const n = a.length - 1;\n        const an = a[n];\n\n        if (an !== 1) {\n            a = this.coefs.map(v => v / an);\n        }\n\n        const b = a.map((v, i) => {\n            return (i < n)\n                ? Math.pow(Math.abs((i === 0) ? v / 2 : v), 1 / (n - i))\n                : v;\n        });\n\n        let coefSelectionFunc;\n        const find2Max = function(acc, bi, i) {\n            if (coefSelectionFunc(i)) {\n                if (acc.max < bi) {\n                    acc.nearmax = acc.max;\n                    acc.max = bi;\n                }\n                else if (acc.nearmax < bi) {\n                    acc.nearmax = bi;\n                }\n            }\n            return acc;\n        };\n\n        coefSelectionFunc = function(i) {\n            return i < n && a[i] < 0;\n        };\n\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        const max_nearmax_pos = b.reduce(find2Max, {max: 0, nearmax: 0});\n\n        coefSelectionFunc = function(i) {\n            return i < n && ((n % 2 === i % 2) ? a[i] < 0 : a[i] > 0);\n        };\n\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        const max_nearmax_neg = b.reduce(find2Max, {max: 0, nearmax: 0});\n\n        return {\n            negX: -2 * max_nearmax_neg.max,\n            posX: 2 * max_nearmax_pos.max\n        };\n    }\n\n    /**\n     *  Calculates lower Real roots bounds. <br/>\n     *  There are no Real roots in interval <negX, posX>. Determined by Fujiwara method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ negX: number, posX: number }}\n     */\n    boundsLowerRealFujiwara() {\n        const poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice().reverse();\n\n        const res = poly.boundsUpperRealFujiwara();\n\n        res.negX = 1 / res.negX;\n        res.posX = 1 / res.posX;\n\n        return res;\n    }\n\n    /**\n     *  Calculates left and right Real roots bounds. <br/>\n     *  Real roots are in interval [minX, maxX]. Combines Fujiwara lower and upper bounds to get minimal interval.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ minX: number, maxX: number }}\n    */\n    bounds() {\n        const urb = this.boundsUpperRealFujiwara();\n        const rb = {minX: urb.negX, maxX: urb.posX};\n\n        if (urb.negX === 0 && urb.posX === 0) {\n            return rb;\n        }\n\n        if (urb.negX === 0) {\n            rb.minX = this.boundsLowerRealFujiwara().posX;\n        }\n        else if (urb.posX === 0) {\n            rb.maxX = this.boundsLowerRealFujiwara().negX;\n        }\n\n        if (rb.minX > rb.maxX) {\n            rb.minX = rb.maxX = 0;\n        }\n\n        return rb;\n        // TODO: if sure that there are no complex roots\n        // (maybe by using Sturm's theorem) use:\n        // return this.boundsRealLaguerre();\n    }\n\n    /**\n     *  Calculates absolute upper roots bound. <br/>\n     *  All (Complex and Real) roots magnitudes are &lt;= result. Determined by Rouche method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {number}\n     */\n    boundUpperAbsRouche() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const max = a.reduce((prev, curr, i) => {\n            if (i !== n) {\n                curr = Math.abs(curr);\n                return (prev < curr) ? curr : prev;\n            }\n            return prev;\n        }, 0);\n\n        return 1 + max / Math.abs(a[n]);\n    }\n\n    /**\n     *  Calculates absolute lower roots bound. <br/>\n     *  All (Complex and Real) roots magnitudes are &gt;= result. Determined by Rouche method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {number}\n     */\n    boundLowerAbsRouche() {\n        const a = this.coefs;\n        const max = a.reduce((prev, curr, i) => {\n            if (i !== 0) {\n                curr = Math.abs(curr);\n                return (prev < curr) ? curr : prev;\n            }\n            return prev;\n        }, 0);\n\n        return Math.abs(a[0]) / (Math.abs(a[0]) + max);\n    }\n\n    /**\n     *  Calculates left and right Real roots bounds.<br/>\n     *  WORKS ONLY if all polynomial roots are Real.\n     *  Real roots are in interval [minX, maxX]. Determined by Laguerre method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ minX: number, maxX: number }}\n     */\n    boundsRealLaguerre() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const p1 = -a[n - 1] / (n * a[n]);\n        const undersqrt = a[n - 1] * a[n - 1] - 2 * n / (n - 1) * a[n] * a[n - 2];\n        let p2 = (n - 1) / (n * a[n]) * Math.sqrt(undersqrt);\n\n        if (p2 < 0) {\n            p2 = -p2;\n        }\n\n        return {\n            minX: p1 - p2,\n            maxX: p1 + p2\n        };\n    }\n\n    /**\n     *  Root count by Descartes rule of signs. <br/>\n     *  Returns maximum number of positive and negative real roots and minimum number of complex roots.\n     *  @see {@link http://en.wikipedia.org/wiki/Descartes%27_rule_of_signs}\n     *\n     *  @returns {{maxRealPos: number, maxRealNeg: number, minComplex: number}}\n     */\n    countRootsDescartes() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const accum = a.reduce((acc, ai, i) => {\n            if (acc.prev_a !== 0 && ai !== 0) {\n                if ((acc.prev_a < 0) === (ai > 0)) {\n                    acc.pos++;\n                }\n                if (((i % 2 === 0) !== (acc.prev_a < 0)) === ((i % 2 === 1) !== (ai > 0))) {\n                    acc.neg++;\n                }\n            }\n            acc.prev_a = ai;\n            return acc;\n        }, {pos: 0, neg: 0, prev_a: 0});\n\n        return {\n            maxRealPos: accum.pos,\n            maxRealNeg: accum.neg,\n            minComplex: n - (accum.pos + accum.neg)\n        };\n    }\n\n    // getters and setters\n\n    /**\n     *  get degree\n     *\n     *  @returns {number}\n     */\n    getDegree() {\n        return this.coefs.length - 1;\n    }\n\n    /**\n     *  getDerivative\n     *\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    getDerivative() {\n        const derivative = new Polynomial();\n\n        for (let i = 1; i < this.coefs.length; i++) {\n            derivative.coefs.push(i * this.coefs[i]);\n        }\n\n        return derivative;\n    }\n\n    /**\n     *  getRoots\n     *\n     *  @returns {Array<number>}\n     */\n    getRoots() {\n        let result;\n\n        this.simplifyEquals();\n\n        switch (this.getDegree()) {\n            case 0: result = []; break;\n            case 1: result = this.getLinearRoot(); break;\n            case 2: result = this.getQuadraticRoots(); break;\n            case 3: result = this.getCubicRoots(); break;\n            case 4: result = this.getQuarticRoots(); break;\n            default:\n                result = [];\n        }\n\n        return result;\n    }\n\n    /**\n     *  getRootsInInterval\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {Array<number>}\n     */\n    getRootsInInterval(min, max) {\n        const roots = [];\n\n        /**\n         *  @param {number} value\n         */\n        function push(value) {\n            if (typeof value === \"number\") {\n                roots.push(value);\n            }\n        }\n\n        if (this.getDegree() === 0) {\n            throw new RangeError(\"Unexpected empty polynomial\");\n        }\n        else if (this.getDegree() === 1) {\n            push(this.bisection(min, max));\n        }\n        else {\n            // get roots of derivative\n            const deriv = this.getDerivative();\n            const droots = deriv.getRootsInInterval(min, max);\n\n            if (droots.length > 0) {\n                // find root on [min, droots[0]]\n                push(this.bisection(min, droots[0]));\n\n                // find root on [droots[i],droots[i+1]] for 0 <= i <= count-2\n                for (let i = 0; i <= droots.length - 2; i++) {\n                    push(this.bisection(droots[i], droots[i + 1]));\n                }\n\n                // find root on [droots[count-1],xmax]\n                push(this.bisection(droots[droots.length - 1], max));\n            }\n            else {\n                // polynomial is monotone on [min,max], has at most one root\n                push(this.bisection(min, max));\n            }\n        }\n\n        return roots;\n    }\n\n    /**\n     *  getLinearRoot\n     *\n     *  @returns {number}\n     */\n    getLinearRoot() {\n        const result = [];\n        const a = this.coefs[1];\n\n        if (a !== 0) {\n            result.push(-this.coefs[0] / a);\n        }\n\n        return result;\n    }\n\n    /**\n     *  getQuadraticRoots\n     *\n     *  @returns {Array<number>}\n     */\n    getQuadraticRoots() {\n        const results = [];\n\n        if (this.getDegree() === 2) {\n            const a = this.coefs[2];\n            const b = this.coefs[1] / a;\n            const c = this.coefs[0] / a;\n            const d = b * b - 4 * c;\n\n            if (d > 0) {\n                const e = Math.sqrt(d);\n\n                results.push(0.5 * (-b + e));\n                results.push(0.5 * (-b - e));\n            }\n            else if (d === 0) {\n                // really two roots with same value, but we only return one\n                results.push(0.5 * -b);\n            }\n            // else imaginary results\n        }\n\n        return results;\n    }\n\n    /**\n     *  getCubicRoots\n     *\n     *  This code is based on MgcPolynomial.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.geometrictools.com\n     *\n     *  @returns {Array<number>}\n     */\n    getCubicRoots() {\n        const results = [];\n\n        if (this.getDegree() === 3) {\n            const c3 = this.coefs[3];\n            const c2 = this.coefs[2] / c3;\n            const c1 = this.coefs[1] / c3;\n            const c0 = this.coefs[0] / c3;\n\n            const a = (3 * c1 - c2 * c2) / 3;\n            const b = (2 * c2 * c2 * c2 - 9 * c1 * c2 + 27 * c0) / 27;\n            const offset = c2 / 3;\n            let discrim = b * b / 4 + a * a * a / 27;\n            const halfB = b / 2;\n\n            const ZEROepsilon = this.zeroErrorEstimate();\n\n            if (Math.abs(discrim) <= ZEROepsilon) {\n                discrim = 0;\n            }\n\n            if (discrim > 0) {\n                const e = Math.sqrt(discrim);\n                let root; // eslint-disable-line no-shadow\n\n                let tmp = -halfB + e;\n\n                if (tmp >= 0) {\n                    root = Math.pow(tmp, 1 / 3);\n                }\n                else {\n                    root = -Math.pow(-tmp, 1 / 3);\n                }\n\n                tmp = -halfB - e;\n\n                if (tmp >= 0) {\n                    root += Math.pow(tmp, 1 / 3);\n                }\n                else {\n                    root -= Math.pow(-tmp, 1 / 3);\n                }\n\n                results.push(root - offset);\n            }\n            else if (discrim < 0) {\n                const distance = Math.sqrt(-a / 3);\n                const angle = Math.atan2(Math.sqrt(-discrim), -halfB) / 3;\n                const cos = Math.cos(angle);\n                const sin = Math.sin(angle);\n                const sqrt3 = Math.sqrt(3);\n\n                results.push(2 * distance * cos - offset);\n                results.push(-distance * (cos + sqrt3 * sin) - offset);\n                results.push(-distance * (cos - sqrt3 * sin) - offset);\n            }\n            else {\n                let tmp;\n\n                if (halfB >= 0) {\n                    tmp = -Math.pow(halfB, 1 / 3);\n                }\n                else {\n                    tmp = Math.pow(-halfB, 1 / 3);\n                }\n\n                results.push(2 * tmp - offset);\n                // really should return next root twice, but we return only one\n                results.push(-tmp - offset);\n            }\n        }\n\n        return results;\n    }\n\n    /**\n     *  Calculates roots of quartic polynomial. <br/>\n     *  First, derivative roots are found, then used to split quartic polynomial\n     *  into segments, each containing one root of quartic polynomial.\n     *  Segments are then passed to newton's method to find roots.\n     *\n     *  @returns {Array<number>} roots\n     */\n    getQuarticRoots() {\n        let results = [];\n        const n = this.getDegree();\n\n        if (n === 4) {\n            const poly = new Polynomial();\n\n            poly.coefs = this.coefs.slice();\n            poly.divideEqualsScalar(poly.coefs[n]);\n\n            const ERRF = 1e-15;\n\n            if (Math.abs(poly.coefs[0]) < 10 * ERRF * Math.abs(poly.coefs[3])) {\n                poly.coefs[0] = 0;\n            }\n\n            const poly_d = poly.getDerivative();\n            const derrt = poly_d.getRoots().sort((a, b) => a - b);\n            const dery = [];\n            const nr = derrt.length - 1;\n            const rb = this.bounds();\n\n            const maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n            const ZEROepsilon = this.zeroErrorEstimate(maxabsX);\n\n            for (let i = 0; i <= nr; i++) {\n                dery.push(poly.eval(derrt[i]));\n            }\n\n            for (let i = 0; i <= nr; i++) {\n                if (Math.abs(dery[i]) < ZEROepsilon) {\n                    dery[i] = 0;\n                }\n            }\n\n            let i = 0;\n            const dx = Math.max(0.1 * (rb.maxX - rb.minX) / n, ERRF);\n            const guesses = [];\n            const minmax = [];\n\n            if (nr > -1) {\n                if (dery[0] !== 0) {\n                    if (sign(dery[0]) !== sign(poly.eval(derrt[0] - dx) - dery[0])) {\n                        guesses.push(derrt[0] - dx);\n                        minmax.push([rb.minX, derrt[0]]);\n                    }\n                }\n                else {\n                    results.push(derrt[0], derrt[0]);\n                    i++;\n                }\n\n                for (; i < nr; i++) {\n                    if (dery[i + 1] === 0) {\n                        results.push(derrt[i + 1], derrt[i + 1]);\n                        i++;\n                    }\n                    else if (sign(dery[i]) !== sign(dery[i + 1])) {\n                        guesses.push((derrt[i] + derrt[i + 1]) / 2);\n                        minmax.push([derrt[i], derrt[i + 1]]);\n                    }\n                }\n                if (dery[nr] !== 0 && sign(dery[nr]) !== sign(poly.eval(derrt[nr] + dx) - dery[nr])) {\n                    guesses.push(derrt[nr] + dx);\n                    minmax.push([derrt[nr], rb.maxX]);\n                }\n            }\n\n            /**\n             *  @param {number} x\n             *  @returns {number}\n             */\n            const f = function(x) {\n                return poly.eval(x);\n            };\n\n            /**\n             *  @param {number} x\n             *  @returns {number}\n             */\n            const df = function(x) {\n                return poly_d.eval(x);\n            };\n\n            if (guesses.length > 0) {\n                for (i = 0; i < guesses.length; i++) {\n                    guesses[i] = Polynomial.newtonSecantBisection(guesses[i], f, df, 32, minmax[i][0], minmax[i][1]);\n                }\n            }\n\n            results = results.concat(guesses);\n        }\n\n        return results;\n    }\n}\n\nexport default Polynomial;\n","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,19],$V2=[1,7],$V3=[1,10],$V4=[1,13],$V5=[1,32],$V6=[1,14],$V7=[1,38],$V8=[1,15],$V9=[1,22],$Va=[1,37],$Vb=[1,25],$Vc=[1,28],$Vd=[1,29],$Ve=[1,33],$Vf=[1,34],$Vg=[1,36],$Vh=[1,35],$Vi=[1,5],$Vj=[1,5,14,16,24,28,56],$Vk=[1,61],$Vl=[1,63],$Vm=[1,62],$Vn=[1,50],$Vo=[1,56],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,51],$Vv=[1,53],$Vw=[1,54],$Vx=[1,59],$Vy=[1,60],$Vz=[1,5,14,16,24,28,56,69],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,56,69],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,45,46,56,69],$VO=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,45,46,52,55,56,69],$VP=[2,51],$VQ=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,45,46,52,55,56,69,73],$VR=[1,5,14,16,24,28,56,73],$VS=[1,109],$VT=[1,125],$VU=[1,115],$VV=[1,122],$VW=[1,126],$VX=[1,133],$VY=[1,135],$VZ=[1,117],$V_=[1,129],$V$=[1,127],$V01=[1,134],$V11=[1,128],$V21=[1,130],$V31=[1,138],$V41=[1,120],$V51=[1,118],$V61=[1,119],$V71=[1,121],$V81=[1,137],$V91=[1,124],$Va1=[1,131],$Vb1=[1,132],$Vc1=[1,136],$Vd1=[1,123],$Ve1=[1,162],$Vf1=[1,165],$Vg1=[14,56],$Vh1=[14,28],$Vi1=[1,177],$Vj1=[14,24,56],$Vk1=[14,24,56,73],$Vl1=[14,28,73],$Vm1=[14,24],$Vn1=[1,5,14,28,56],$Vo1=[1,201];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"program\":3,\"statements\":4,\";\":5,\"statement\":6,\"assignment\":7,\"sequence\":8,\"LET\":9,\"IDENTIFIER\":10,\"=\":11,\"DEF\":12,\"sequences\":13,\",\":14,\"steps\":15,\"|>\":16,\"step\":17,\"=~\":18,\"namedPattern\":19,\"expression\":20,\"booleanExpression\":21,\"MAP\":22,\"(\":23,\")\":24,\"PATTERNS\":25,\"{\":26,\"patterns\":27,\"}\":28,\"SEQUENCES\":29,\"relationalExpression\":30,\"AND\":31,\"OR\":32,\"mathExpression\":33,\"<\":34,\"<=\":35,\"==\":36,\"!=\":37,\">=\":38,\">\":39,\"callExpression\":40,\"+\":41,\"-\":42,\"*\":43,\"/\":44,\"MOD\":45,\"POW\":46,\"argumentList\":47,\"unaryExpression\":48,\"memberExpression\":49,\"NOT\":50,\"primaryExpression\":51,\".\":52,\"name\":53,\"integer\":54,\"[\":55,\"]\":56,\"boolean\":57,\"NULL_TYPE\":58,\"float\":59,\"string\":60,\"UNDEFINED_TYPE\":61,\"$\":62,\"arrayExpression\":63,\"objectExpression\":64,\"expressionElements\":65,\"expressionElement\":66,\"expressionProperties\":67,\"expressionProperty\":68,\":\":69,\"argument\":70,\"...\":71,\"pattern\":72,\"AS\":73,\"ANY_TYPE\":74,\"ARRAY_TYPE\":75,\"BOOLEAN_TYPE\":76,\"TRUE\":77,\"FALSE\":78,\"NUMBER_TYPE\":79,\"OBJECT_TYPE\":80,\"STRING_TYPE\":81,\"arrayPattern\":82,\"objectPattern\":83,\"PATTERN\":84,\"ENUMERATION\":85,\"patternElements\":86,\"namedPatternElement\":87,\"patternElement\":88,\"range\":89,\"..\":90,\"patternProperties\":91,\"namedPatternProperty\":92,\"patternProperty\":93,\"STRING\":94,\"NUMBER\":95,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\";\",9:\"LET\",10:\"IDENTIFIER\",11:\"=\",12:\"DEF\",14:\",\",16:\"|>\",18:\"=~\",22:\"MAP\",23:\"(\",24:\")\",25:\"PATTERNS\",26:\"{\",28:\"}\",29:\"SEQUENCES\",31:\"AND\",32:\"OR\",34:\"<\",35:\"<=\",36:\"==\",37:\"!=\",38:\">=\",39:\">\",41:\"+\",42:\"-\",43:\"*\",44:\"/\",45:\"MOD\",46:\"POW\",50:\"NOT\",52:\".\",55:\"[\",56:\"]\",58:\"NULL_TYPE\",61:\"UNDEFINED_TYPE\",62:\"$\",69:\":\",71:\"...\",73:\"AS\",74:\"ANY_TYPE\",75:\"ARRAY_TYPE\",76:\"BOOLEAN_TYPE\",77:\"TRUE\",78:\"FALSE\",79:\"NUMBER_TYPE\",80:\"OBJECT_TYPE\",81:\"STRING_TYPE\",84:\"PATTERN\",85:\"ENUMERATION\",90:\"..\",94:\"STRING\",95:\"NUMBER\"},\nproductions_: [0,[3,1],[3,2],[4,3],[4,1],[6,1],[6,1],[7,4],[7,4],[13,3],[13,1],[8,1],[15,3],[15,1],[17,2],[17,1],[20,1],[20,6],[20,4],[20,4],[21,1],[21,3],[21,3],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[33,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[40,3],[40,4],[40,1],[48,1],[48,2],[49,1],[49,3],[49,3],[49,4],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,3],[63,2],[63,3],[65,3],[65,1],[66,1],[66,1],[64,2],[64,3],[67,3],[67,1],[68,3],[68,1],[68,1],[47,3],[47,1],[70,1],[70,2],[27,3],[27,1],[19,1],[19,3],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,2],[72,2],[72,1],[82,2],[82,3],[86,3],[86,1],[87,1],[87,3],[88,1],[88,3],[88,3],[88,5],[89,3],[89,2],[89,2],[89,1],[83,2],[83,3],[91,3],[91,1],[92,1],[92,3],[93,3],[93,1],[57,1],[57,1],[60,1],[54,1],[59,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nreturn $$[$0];\nbreak;\ncase 2:\nreturn $$[$0-1];\nbreak;\ncase 3: case 9: case 12: case 58: case 64: case 69: case 73: case 96: case 110:\n$$[$0-2].push($$[$0]); this.$ = $$[$0-2]\nbreak;\ncase 4: case 10: case 13: case 59: case 65: case 70: case 74: case 97: case 111:\nthis.$ = [ $$[$0] ];\nbreak;\ncase 5: case 6: case 14: case 15: case 16: case 20: case 23: case 30: case 39: case 40: case 42: case 53: case 54: case 60: case 61: case 68: case 71: case 112: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144:\nthis.$ = $$[$0]\nbreak;\ncase 7:\nthis.$ = { type: 'assignment', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 8:\nthis.$ = { type: 'def', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 11:\nthis.$ = { type: 'sequence', steps: $$[$0] };\nbreak;\ncase 17:\nthis.$ = { type: 'map', value: [ $$[$0-3], $$[$0-1] ] };\nbreak;\ncase 18:\nthis.$ = { type: 'patterns', patterns: $$[$0-1] };\nbreak;\ncase 19:\nthis.$ = { type: 'sequences', sequences: $$[$0-1] };\nbreak;\ncase 21:\nthis.$ = { type: 'and', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 22:\nthis.$ = { type: 'or',  left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 24:\nthis.$ = { type: 'less_than',     left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 25:\nthis.$ = { type: 'less_equal',    left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 26:\nthis.$ = { type: 'equal',         left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 27:\nthis.$ = { type: 'not_equal',     left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 28:\nthis.$ = { type: 'greater_equal', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 29:\nthis.$ = { type: 'greater_than',  left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 31:\nthis.$ = { type: 'add',      left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 32:\nthis.$ = { type: 'subtract', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 33:\nthis.$ = { type: 'multiply', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 34:\nthis.$ = { type: 'divide',   left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 35:\nthis.$ = { type: 'modulus',  left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 36:\nthis.$ = { type: 'power',    left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 37:\nthis.$ = { type: 'invoke', name: $$[$0-2], args: [] };\nbreak;\ncase 38:\nthis.$ = { type: 'invoke', name: $$[$0-3], args: $$[$0-1] };\nbreak;\ncase 41:\nthis.$ = { type: 'not', value: $$[$0] };\nbreak;\ncase 43:\nthis.$ = { type: 'get-property', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 44:\nthis.$ = { type: 'get-index', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 45:\nthis.$ = { type: 'get-index', left: $$[$0-3], right: $$[$0-1] };\nbreak;\ncase 46:\nthis.$ = { type: 'boolean',   value: $$[$0] };\nbreak;\ncase 47:\nthis.$ = { type: 'boolean',   value: null };\nbreak;\ncase 48:\nthis.$ = { type: 'number',    value: $$[$0] };\nbreak;\ncase 49:\nthis.$ = { type: 'string',    value: $$[$0] };\nbreak;\ncase 50:\nthis.$ = { type: 'undefined', value: undefined };\nbreak;\ncase 51:\nthis.$ = { type: 'get-value', name: $$[$0] };\nbreak;\ncase 52:\nthis.$ = { type: 'get-structure' };\nbreak;\ncase 55:\nthis.$ = $$[$0-1];\nbreak;\ncase 56:\nthis.$ = { type: 'array', value: [] };\nbreak;\ncase 57:\nthis.$ = { type: 'array', value: $$[$0-1] };\nbreak;\ncase 62:\nthis.$ = { type: 'object', value: [] };\nbreak;\ncase 63:\nthis.$ = { type: 'object', value: $$[$0-1] };\nbreak;\ncase 66:\nthis.$ = { type: 'property', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 67:\nthis.$ = { type: 'property', name: $$[$0], value: null };\nbreak;\ncase 72:\nthis.$ = { type: 'spread', expression: $$[$0] };\nbreak;\ncase 75: case 98:\n$$[$0].assignTo = null; this.$ = $$[$0];\nbreak;\ncase 76: case 99: case 113:\n$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];\nbreak;\ncase 77:\nthis.$ = { type: 'pattern', patternType: 'any', value: null };\nbreak;\ncase 78:\nthis.$ = { type: 'pattern', patternType: 'array',     value: null  };\nbreak;\ncase 79:\nthis.$ = { type: 'pattern', patternType: 'boolean',   value: null  };\nbreak;\ncase 80:\nthis.$ = { type: 'pattern', patternType: 'boolean',   value: true  };\nbreak;\ncase 81:\nthis.$ = { type: 'pattern', patternType: 'boolean',   value: false };\nbreak;\ncase 82:\nthis.$ = { type: 'pattern', patternType: 'null',      value: null  };\nbreak;\ncase 83:\nthis.$ = { type: 'pattern', patternType: 'number',    value: null  };\nbreak;\ncase 84:\nthis.$ = { type: 'pattern', patternType: 'number',    value: $$[$0]    };\nbreak;\ncase 85:\nthis.$ = { type: 'pattern', patternType: 'object',    value: null  };\nbreak;\ncase 86:\nthis.$ = { type: 'pattern', patternType: 'string',    value: null  };\nbreak;\ncase 87:\nthis.$ = { type: 'pattern', patternType: 'string',    value: $$[$0]    };\nbreak;\ncase 88:\nthis.$ = { type: 'pattern', patternType: 'undefined', value: null  };\nbreak;\ncase 89: case 90:\nthis.$ = $$[$0];\nbreak;\ncase 91:\nthis.$ = { type: 'pattern-reference', name: $$[$0] };\nbreak;\ncase 92:\nthis.$ = { type: 'enumeration-reference', name: $$[$0] };\nbreak;\ncase 93:\nthis.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };\nbreak;\ncase 94:\nthis.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };\nbreak;\ncase 95:\nthis.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };\nbreak;\ncase 100:\nthis.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };\nbreak;\ncase 101:\nthis.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };\nbreak;\ncase 102:\nthis.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };\nbreak;\ncase 103:\nthis.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };\nbreak;\ncase 104:\nthis.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };\nbreak;\ncase 105:\nthis.$ = { type: 'range', start: 0, stop: $$[$0] };\nbreak;\ncase 106:\nthis.$ = { type: 'range', start: $$[$0-1], stop: Infinity };\nbreak;\ncase 107:\nthis.$ = { type: 'range', start: $$[$0], stop: $$[$0] };\nbreak;\ncase 108:\nthis.$ = { type: 'pattern', patternType: 'object', value: null };\nbreak;\ncase 109:\nthis.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };\nbreak;\ncase 114:\nthis.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };\nbreak;\ncase 115:\nthis.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };\nbreak;\ncase 116:\nthis.$ = true;\nbreak;\ncase 117:\nthis.$ = false;\nbreak;\ncase 118:\nthis.$ = $$[$0].substring(1,  $$[$0].length - 1);\nbreak;\ncase 119:\nthis.$ = parseInt($$[$0]);\nbreak;\ncase 120:\nthis.$ = parseFloat($$[$0]);\nbreak;\n}\n},\ntable: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,12:$V2,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{1:[3]},{1:[2,1],5:[1,39]},o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),{10:[1,40]},{10:[1,41]},o([1,5,14,24,28,56],[2,11],{16:[1,42]}),o($Vj,[2,13]),{10:$Vk,19:43,26:$Vl,55:$Vm,58:$Vn,59:52,60:55,61:$Vo,72:44,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,94:$Vg,95:$Vh},o($Vj,[2,15]),o($Vz,[2,16]),{23:[1,64]},{26:[1,65]},{26:[1,66]},o($Vz,[2,20],{31:[1,67],32:[1,68],34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF}),o($VG,[2,23],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VN,[2,30]),o($VO,$VP,{23:[1,81]}),o($VN,[2,39]),o($VN,[2,40],{52:[1,82],55:[1,83]}),{10:[1,85],23:$V5,26:$V7,48:84,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($VO,[2,42]),o($VO,[2,46]),o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54]),{10:$V1,20:86,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($VO,[2,116]),o($VO,[2,117]),o($VQ,[2,120]),o($VQ,[2,118]),{7:91,9:$V0,10:$V1,12:$V2,20:90,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,56:[1,87],57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,65:88,66:89,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{7:96,9:$V0,10:$V1,12:$V2,20:95,21:12,22:$V4,23:$V5,25:$V6,26:$V7,28:[1,92],29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,67:93,68:94,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{1:[2,2],6:97,7:4,8:5,9:$V0,10:$V1,12:$V2,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{11:[1,98]},{11:[1,99]},{10:$V1,17:100,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($Vj,[2,14]),o($Vj,[2,75],{73:[1,101]}),o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),o($VR,[2,82]),o($VR,[2,83]),o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,86]),o($VR,[2,87]),o($VR,[2,88]),o($VR,[2,89]),o($VR,[2,90]),{10:[1,102]},{10:[1,103]},o($VR,[2,93]),{10:$Vk,23:$VS,26:$Vl,55:$Vm,56:[1,104],58:$Vn,59:52,60:55,61:$Vo,72:108,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,86:105,87:106,88:107,94:$Vg,95:$Vh},{9:$VT,10:$VU,12:$VV,22:$VW,25:$VX,28:[1,110],29:$VY,31:$VZ,32:$V_,45:$V$,46:$V01,50:$V11,53:114,58:$V21,60:116,61:$V31,73:$V41,74:$V51,75:$V61,76:$V71,77:$V81,78:$V91,79:$Va1,80:$Vb1,81:$Vc1,85:$Vd1,91:111,92:112,93:113,94:$Vg},{10:$V1,20:139,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$Vk,19:141,26:$Vl,27:140,55:$Vm,58:$Vn,59:52,60:55,61:$Vo,72:44,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,94:$Vg,95:$Vh},{8:143,10:$V1,13:142,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,30:144,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,30:145,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,33:146,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,33:147,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,33:148,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,33:149,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,33:150,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,33:151,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,40:152,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,40:153,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,40:154,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,40:155,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,40:156,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,23:$V5,26:$V7,40:157,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{10:$V1,20:161,21:12,22:$V4,23:$V5,24:[1,158],25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,47:159,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,70:160,71:$Ve1,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{9:$VT,10:$VU,12:$VV,22:$VW,25:$VX,29:$VY,31:$VZ,32:$V_,45:$V$,46:$V01,50:$V11,53:163,54:164,58:$V21,60:116,61:$V31,73:$V41,74:$V51,75:$V61,76:$V71,77:$V81,78:$V91,79:$Va1,80:$Vb1,81:$Vc1,85:$Vd1,94:$Vg,95:$Vf1},{54:166,95:$Vf1},o($VN,[2,41]),o($VO,$VP),{24:[1,167]},o($VO,[2,56]),{14:[1,169],56:[1,168]},o($Vg1,[2,59]),o($Vg1,[2,60]),o($Vg1,[2,61]),o($VO,[2,62]),{14:[1,171],28:[1,170]},o($Vh1,[2,65]),o($Vh1,[2,67],{69:[1,172]}),o($Vh1,[2,68]),o($Vi,[2,3]),{8:173,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{8:174,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($Vj,[2,12]),{10:[1,175]},o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,94]),{14:$Vi1,56:[1,176]},o($Vj1,[2,97]),o($Vj1,[2,98],{73:[1,178]}),o($Vk1,[2,100],{5:[1,179]}),{10:$Vk,23:$VS,26:$Vl,55:$Vm,58:$Vn,59:52,60:55,61:$Vo,72:108,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,86:180,87:106,88:107,94:$Vg,95:$Vh},o($VR,[2,108]),{14:[1,182],28:[1,181]},o($Vh1,[2,111]),o($Vh1,[2,112],{73:[1,183]}),o($Vl1,[2,115],{69:[1,184]}),o($VQ,[2,121]),o($VQ,[2,122]),o($VQ,[2,123]),o($VQ,[2,124]),o($VQ,[2,125]),o($VQ,[2,126]),o($VQ,[2,127]),o($VQ,[2,128]),o($VQ,[2,129]),o($VQ,[2,130]),o($VQ,[2,131]),o($VQ,[2,132]),o($VQ,[2,133]),o($VQ,[2,134]),o($VQ,[2,135]),o($VQ,[2,136]),o($VQ,[2,137]),o($VQ,[2,138]),o($VQ,[2,139]),o($VQ,[2,140]),o($VQ,[2,141]),o($VQ,[2,142]),o($VQ,[2,143]),o($VQ,[2,144]),{14:[1,185]},{14:[1,187],28:[1,186]},o($Vh1,[2,74]),{14:[1,189],28:[1,188]},o($Vh1,[2,10]),o($Vz,[2,21],{34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF}),o($Vz,[2,22],{34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF}),o($VG,[2,24],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VG,[2,25],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VG,[2,26],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VG,[2,27],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VG,[2,28],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VG,[2,29],{41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($VN,[2,31]),o($VN,[2,32]),o($VN,[2,33]),o($VN,[2,34]),o($VN,[2,35]),o($VN,[2,36]),o($VN,[2,37]),{14:[1,191],24:[1,190]},o($Vm1,[2,70]),o($Vm1,[2,71]),{10:$V1,20:192,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($VO,[2,43]),o($VO,[2,44]),o([1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,45,46,52,55,56,69,73,90],[2,119]),{56:[1,193]},o($VO,[2,55]),o($VO,[2,57]),{7:91,9:$V0,10:$V1,12:$V2,20:90,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,66:194,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($VO,[2,63]),{7:96,9:$V0,10:$V1,12:$V2,20:95,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,68:195,77:$Ve,78:$Vf,94:$Vg,95:$Vh},{8:196,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($Vn1,[2,7]),o($Vn1,[2,8]),o($Vj,[2,76]),o($VR,[2,95]),{10:$Vk,23:$VS,26:$Vl,55:$Vm,58:$Vn,59:52,60:55,61:$Vo,72:108,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,87:197,88:107,94:$Vg,95:$Vh},{10:[1,198]},{54:200,89:199,90:$Vo1,95:$Vf1},{14:$Vi1,24:[1,202]},o($VR,[2,109]),{9:$VT,10:$VU,12:$VV,22:$VW,25:$VX,29:$VY,31:$VZ,32:$V_,45:$V$,46:$V01,50:$V11,53:114,58:$V21,60:116,61:$V31,73:$V41,74:$V51,75:$V61,76:$V71,77:$V81,78:$V91,79:$Va1,80:$Vb1,81:$Vc1,85:$Vd1,92:203,93:113,94:$Vg},{10:[1,204]},{10:$Vk,26:$Vl,55:$Vm,58:$Vn,59:52,60:55,61:$Vo,72:205,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,94:$Vg,95:$Vh},{8:206,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($Vz,[2,18]),{10:$Vk,19:207,26:$Vl,55:$Vm,58:$Vn,59:52,60:55,61:$Vo,72:44,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:57,83:58,84:$Vx,85:$Vy,94:$Vg,95:$Vh},o($Vz,[2,19]),{8:208,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($VN,[2,38]),{10:$V1,20:161,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,48:20,49:21,50:$V9,51:23,55:$Va,57:24,58:$Vb,59:26,60:27,61:$Vc,62:$Vd,63:30,64:31,70:209,71:$Ve1,77:$Ve,78:$Vf,94:$Vg,95:$Vh},o($Vm1,[2,72]),o($VO,[2,45]),o($Vg1,[2,58]),o($Vh1,[2,64]),o($Vh1,[2,66]),o($Vj1,[2,96]),o($Vj1,[2,99]),o($Vk1,[2,101]),o($Vk1,[2,107],{90:[1,210]}),{54:211,95:$Vf1},o($Vk1,[2,102],{5:[1,212]}),o($Vh1,[2,110]),o($Vh1,[2,113]),o($Vl1,[2,114]),{24:[1,213]},o($Vh1,[2,73]),o($Vh1,[2,9]),o($Vm1,[2,69]),o($Vk1,[2,106],{54:214,95:$Vf1}),o($Vk1,[2,105]),{54:200,89:215,90:$Vo1,95:$Vf1},o($Vz,[2,17]),o($Vk1,[2,104]),o($Vk1,[2,103])],\ndefaultActions: {},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:/* skip comment */\nbreak;\ncase 2:return 31\nbreak;\ncase 3:return 74\nbreak;\ncase 4:return 75\nbreak;\ncase 5:return 73\nbreak;\ncase 6:return 76\nbreak;\ncase 7:return 12\nbreak;\ncase 8:return 85\nbreak;\ncase 9:return 78\nbreak;\ncase 10:return 9\nbreak;\ncase 11:return 22\nbreak;\ncase 12:return 45\nbreak;\ncase 13:return 50\nbreak;\ncase 14:return 32\nbreak;\ncase 15:return 58\nbreak;\ncase 16:return 79\nbreak;\ncase 17:return 80\nbreak;\ncase 18:return 25\nbreak;\ncase 19:return 46\nbreak;\ncase 20:return 29\nbreak;\ncase 21:return 81\nbreak;\ncase 22:return 77\nbreak;\ncase 23:return 61\nbreak;\ncase 24:return 95\nbreak;\ncase 25:return 94\nbreak;\ncase 26:return 23\nbreak;\ncase 27:return 24\nbreak;\ncase 28:return 26\nbreak;\ncase 29:return 28\nbreak;\ncase 30:return 55\nbreak;\ncase 31:return 56\nbreak;\ncase 32:return 16\nbreak;\ncase 33:return '|'\nbreak;\ncase 34:return 14\nbreak;\ncase 35:return 69\nbreak;\ncase 36:return 5\nbreak;\ncase 37:return 35\nbreak;\ncase 38:return 38\nbreak;\ncase 39:return 18\nbreak;\ncase 40:return 36\nbreak;\ncase 41:return 37\nbreak;\ncase 42:return 34\nbreak;\ncase 43:return 39\nbreak;\ncase 44:return 11\nbreak;\ncase 45:return 71\nbreak;\ncase 46:return 90\nbreak;\ncase 47:return 52\nbreak;\ncase 48:return '_'\nbreak;\ncase 49:return 41\nbreak;\ncase 50:return 42\nbreak;\ncase 51:return 43\nbreak;\ncase 52:return 44\nbreak;\ncase 53:return 62\nbreak;\ncase 54:return 10\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:\\/\\/.*)/,/^(?:and\\b)/,/^(?:any\\b)/,/^(?:array\\b)/,/^(?:as\\b)/,/^(?:boolean\\b)/,/^(?:def\\b)/,/^(?:enum\\b)/,/^(?:false\\b)/,/^(?:let\\b)/,/^(?:map\\b)/,/^(?:mod\\b)/,/^(?:not\\b)/,/^(?:or\\b)/,/^(?:null\\b)/,/^(?:number\\b)/,/^(?:object\\b)/,/^(?:patterns\\b)/,/^(?:pow\\b)/,/^(?:sequences\\b)/,/^(?:string\\b)/,/^(?:true\\b)/,/^(?:undefined\\b)/,/^(?:[-+]?(0|[1-9]\\d*)(\\.\\d+)?)/,/^(?:\"[^\"\\r\\n]*\")/,/^(?:\\()/,/^(?:\\))/,/^(?:{)/,/^(?:})/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\|>)/,/^(?:\\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:>=)/,/^(?:=~)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\\.{3})/,/^(?:\\.{2})/,/^(?:\\.)/,/^(?:_)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:\\$)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nexport default parser;\n","// General functions\n\n/**\n * Return the type name of the specified item\n *\n * @param {*} item\n * @returns {string}\n */\nexport function typeName(item) {\n    switch (item) {\n        case null:\n            return \"null\";\n        case undefined:\n            return \"undefined\";\n        default:\n            if (Array.isArray(item)) {\n                return \"array\";\n            }\n\n            return typeof item;\n    }\n}\n\n// Array related functions\n\n/**\n * Return the length of an array\n *\n * @param {Array} list\n * @returns {number}\n */\nexport function length(list) { /* eslint-disable-line no-shadow */\n    return (Array.isArray(list)) ? list.length : 0;\n}\n\n/**\n * Combine multiple arrays into a single array\n *\n * @param {Array<Array>} lists\n * @param {*} [missing=undefined]\n * @returns {Array}\n */\nexport function zip(lists, missing = undefined) {\n    const result = [];\n\n    if (Array.isArray(lists) && lists.length > 0 && lists.every(l => Array.isArray(l))) {\n        const maxLength = Math.max(...lists.map(l => l.length));\n\n        for (let i = 0; i < maxLength; i++) {\n            const part = [];\n\n            for (const list of lists) {\n                part.push(i < list.length ? list[i] : missing);\n            }\n\n            result.push(part);\n        }\n    }\n\n\n    return result;\n}\n\n/**\n * Partition an array into multiple arrays\n *\n * @param {Array} items\n * @param {number} count\n * @param {number} advance\n * @param {*} [missing=undefined]\n */\nexport function partition(items, count, advance, missing = undefined) {\n    /* eslint-disable-next-line no-shadow */\n    const {length} = items;\n    const result = [];\n\n    // default advance to count, if its not defined\n    advance = advance === undefined ? count : advance;\n\n    // we can't advance backwards and we always need to advance\n    count = Math.max(1, count);\n    advance = Math.max(1, advance);\n\n    for (let i = 0; i < length; i += advance) {\n        const part = [];\n        let index = i;\n\n        for (let j = 0; j < count; j++, index++) {\n            part.push(index < length ? items[index] : missing);\n        }\n\n        result.push(part);\n    }\n\n    return result;\n}\n\n/**\n * Return a new array with the original array's content reversed\n *\n * @param {Array} items\n * @returns {Array|undefined}\n */\nexport function reverse(items) {\n    return Array.isArray(items)\n        ? items.slice().reverse()\n        : undefined;\n}\n\n/**\n * Return a new sorted array\n *\n * @param {Array} items\n * @param {Function} comparator\n * @returns {Array|undefined}\n */\nexport function sort(items, comparator) {\n    return Array.isArray(items)\n        ? items.slice().sort(comparator)\n        : undefined;\n}\n\n/**\n * Return a string by concatenating a list of strings, delimiting each with another string\n *\n * @param {Array<string>} items\n * @param {string} delimiter\n * @returns {string}\n */\nexport function join(items, delimiter) {\n    return items.join(delimiter);\n}\n\n// Object related functions\n\n/**\n * Predicate to determine if an item is an object\n *\n * @param {*} item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return item !== null && typeof item === \"object\";\n}\n\n/**\n * Return a list of keys from an object\n *\n * @param {Object} item\n * @returns {string[]}\n */\nexport function keys(item) {\n    /* eslint-disable-next-line compat/compat */\n    return isObject(item) ? Object.keys(item) : [];\n}\n\n/**\n * Return a list of values from an object\n *\n * @param {Object} item\n * @returns {any[]}\n */\nexport function values(item) {\n    /* eslint-disable-next-line compat/compat */\n    return isObject(item) ? Object.values(item) : [];\n}\n\n/**\n * Return a list of key/value pairs from an object. Each element in the result is a 2-element array\n * where the first element is the key and the second element is the value\n *\n * @param {Object} item\n * @returns {Array<Array>}\n */\nexport function pairs(item) {\n    /* eslint-disable-next-line compat/compat */\n    return isObject(item) ? Object.entries(item) : [];\n}\n\n/**\n * Convert a list of key/value pairs into an object. This is the reverse of pairs\n *\n * @param {Array<Array>} pairs\n * @returns {Object}\n */\nexport function fromPairs(pairs) { /* eslint-disable-line no-shadow */\n    const result = {};\n\n    if (Array.isArray(pairs)) {\n        for (const pair of pairs) {\n            if (pair.length >= 2) {\n                const [key, value] = pair;\n\n                result[key] = value;\n            }\n        }\n    }\n\n    return result;\n}\n\n// Array and Object related\n\n/**\n * If all items are objects, a new object with all the properties of all objects will be merged. If the same property\n * exists on multiple objects, the last object with that property wins.\n *\n * If the first item is an array, a new array will be created by appending all non-array items and concatenating all\n * array items.\n *\n * @param {Object|Array} items\n * @returns {Object|Array|undefined}\n */\nexport function merge(...items) {\n    if (items.length > 0 && Array.isArray(items[0])) {\n        return items[0].concat(...items.slice(1));\n    }\n    else if (items.every(item => isObject(item))) {\n        return Object.assign({}, ...items);\n    }\n\n    return undefined;\n}\n","/**\n *  Transformer.jss\n *\n *  @copyright 2019, Kevin Lindsey\n *  @module Transformer\n */\n\n// import util from \"util\";\n// import Parser from \"./Parser.js\";\nimport Parser from \"./GeneratedParser.js\";\nimport * as StdLib from \"./StandardLibrary.js\";\n\nconst FAILURE_VALUE = {};\nexport {FAILURE_VALUE};\n\n/**\n * Determine if object is something that can have properties\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\n\n/**\n * Transformer\n */\nexport default class Transformer {\n    /**\n     * Create a new empty Transformer. Normalizers can be used to validate and transform data. However, when a new\n     * Transformer has been created, it needs to be populated with one or more type descriptions. The easiest way to do\n     * this is with the static method fromSource.\n     */\n    constructor() {\n        this.symbolTable = {};\n        this.functions = {};\n        this.messages = [];\n        this.verbose = false;\n\n        // add standard library\n        /* eslint-disable-next-line guard-for-in */\n        for (const name in StdLib) {\n            /* eslint-disable-next-line import/namespace */\n            this.functions[name] = StdLib[name];\n        }\n    }\n\n    /**\n     * Add function\n     *\n     * @param {string} name\n     * @param {Function} reference\n     */\n    addFunction(name, reference) {\n        // TODO: type check\n        this.functions[name] = reference;\n    }\n\n    /**\n     * Add information\n     *\n     * @param {string} message\n     */\n    addInfo(message) {\n        if (this.verbose) {\n            this.messages.push({type: \"message\", level: \"info\", message});\n        }\n    }\n\n    /**\n     * Add a warning\n     *\n     * @param {string} message\n     */\n    addWarning(message) {\n        this.messages.push({type: \"message\", level: \"warning\", message});\n    }\n\n    /**\n     * Add an error\n     *\n     * @param {string} message\n     */\n    addError(message) {\n        this.messages.push({type: \"message\", level: \"error\", message});\n    }\n\n    /**\n     * Compile and execute the source against the specfied structure\n     *\n     * @param {string} source\n     * @param {*} structure\n     * @returns {*}\n     */\n    execute(source, structure) {\n        // TODO: cache results using source or source hash as key\n        // parse source\n        const statements = Parser.parse(source);\n\n        // clear any previous messages\n        this.messages = [];\n\n        // process statements\n        let result;\n\n        for (const statement of statements) {\n            switch (statement.type) {\n                case \"assignment\":\n                case \"def\":\n                case \"sequence\": {\n                    result = this.executeExpression(statement, structure, this.symbolTable);\n\n                    if (result === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n                    break;\n                }\n\n                default:\n                    this.addError(`unknown statement type: ${statement.type}`);\n                    return FAILURE_VALUE;\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute a method and return its value\n     *\n     * @param {object} expression\n     * @param {object} symbolTable\n     * @returns {*}\n     */\n    executeExpression(expression, structure, symbolTable) {\n        const binOp = (typeName, operation) => {\n            const left = this.executeExpression(expression.left, structure, symbolTable);\n\n            /* eslint-disable-next-line valid-typeof */\n            if (left !== FAILURE_VALUE && typeof left === typeName) {\n                const right = this.executeExpression(expression.right, structure, symbolTable);\n\n                /* eslint-disable-next-line valid-typeof */\n                if (right !== FAILURE_VALUE && typeof right === typeName) {\n                    return operation(left, right);\n                }\n            }\n\n            return FAILURE_VALUE;\n        };\n\n        switch (expression.type) {\n            case \"assignment\": {\n                const value = this.executeExpression(expression.value, structure, symbolTable);\n\n                if (value === FAILURE_VALUE) {\n                    this.addError(`Unable to evaluate assignment value for ${expression.name}`);\n                    return FAILURE_VALUE;\n                }\n\n                /* eslint-disable-next-line no-prototype-builtins */\n                if (symbolTable.hasOwnProperty(expression.name)) {\n                    this.addError(`A symbol in current scope was assigned more than once: ${expression.name}`);\n                    return FAILURE_VALUE;\n                }\n\n                symbolTable[expression.name] = value;\n\n                return value;\n            }\n\n            case \"def\":\n                symbolTable[expression.name] = expression.value;\n                return undefined;\n\n            case \"get-value\":\n                if (expression.name in symbolTable) {\n                    const value = symbolTable[expression.name];\n\n                    if (isObject(value) && value.type === \"sequence\") {\n                        const seqValue = this.executeExpression(value, structure, symbolTable);\n\n                        if (seqValue === FAILURE_VALUE) {\n                            this.addError(`Unable to evaluate sequence ${expression.name}`);\n                            return FAILURE_VALUE;\n                        }\n\n                        return seqValue;\n                    }\n\n                    return value;\n                }\n                else if (expression.name in this.functions) {\n                    return this.invokeFunction(expression.name, [structure]);\n                }\n\n                this.addError(`Tried to access unbound symbol: ${expression.name}`);\n                return FAILURE_VALUE;\n\n            case \"get-property\": {\n                const object = this.executeExpression(expression.left, structure, symbolTable);\n\n                return (isObject(object)) ? object[expression.right] : FAILURE_VALUE;\n            }\n\n            case \"get-index\": {\n                const {left, right} = expression;\n                const array = this.executeExpression(left, structure, symbolTable);\n\n                if (Array.isArray(array)) {\n                    const index = (right < 0) ? array.length + right : right;\n\n                    return 0 <= index && index < array.length ? array[index] : FAILURE_VALUE;\n                }\n\n                return FAILURE_VALUE;\n            }\n\n            case \"get-structure\":\n                return structure;\n\n            case \"sequences\": {\n                let result = FAILURE_VALUE;\n\n                for (const sequence of expression.sequences) {\n                    const sequenceSymbolTable = Object.create(symbolTable);\n\n                    result = this.executeExpression(sequence, structure, sequenceSymbolTable);\n\n                    if (result !== FAILURE_VALUE) {\n                        Object.assign(symbolTable, sequenceSymbolTable);\n                        break;\n                    }\n                }\n\n                return result;\n            }\n\n            case \"sequence\": {\n                let currentObject = structure;\n\n                for (const step of expression.steps) {\n                    if (step.type === \"pattern\") {\n                        currentObject = this.executePattern(step, currentObject, symbolTable);\n                    }\n                    else {\n                        currentObject = this.executeExpression(step, currentObject, symbolTable);\n                    }\n\n                    if (currentObject === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n                }\n\n                return currentObject;\n            }\n\n            case \"map\": {\n                const [valueGenerator, transform] = expression.value;\n                const values = this.executeExpression(valueGenerator, structure, symbolTable);\n\n                if (values !== FAILURE_VALUE) {\n                    if (Array.isArray(values) === false) {\n                        this.addError(\"First argument of map must evaluate to an array\");\n                        return FAILURE_VALUE;\n                    }\n\n                    const mapSymbolTable = Object.create(symbolTable);\n\n                    return values.map(value => this.executeExpression(transform, value, mapSymbolTable));\n                }\n\n                return FAILURE_VALUE;\n            }\n\n            case \"patterns\": {\n                let result = FAILURE_VALUE;\n\n                for (const pattern of expression.patterns) {\n                    const patternSymbolTable = Object.create(symbolTable);\n\n                    result = this.executePattern(pattern, structure, patternSymbolTable);\n\n                    if (result !== FAILURE_VALUE) {\n                        Object.assign(symbolTable, patternSymbolTable);\n                        break;\n                    }\n                }\n\n                return result;\n            }\n\n            case \"and\":\n                return binOp(\"boolean\", (a, b) => a && b);\n\n            case \"or\":\n                return binOp(\"boolean\", (a, b) => a || b);\n\n            case \"not\": {\n                const value = this.executeExpression(expression.value, structure, symbolTable);\n\n                if (value !== FAILURE_VALUE && typeof value === \"boolean\") {\n                    return !value;\n                }\n\n                return FAILURE_VALUE;\n            }\n\n            case \"less_than\":\n                return binOp(\"number\", (a, b) => a < b);\n\n            case \"less_equal\":\n                return binOp(\"number\", (a, b) => a <= b);\n\n            case \"equal\":\n                return binOp(\"number\", (a, b) => a === b);\n\n            case \"not_equal\":\n                return binOp(\"number\", (a, b) => a !== b);\n\n            case \"greater_equal\":\n                return binOp(\"number\", (a, b) => a >= b);\n\n            case \"greater_than\":\n                return binOp(\"number\", (a, b) => a > b);\n\n            case \"add\":\n                return binOp(\"number\", (a, b) => a + b);\n\n            case \"subtract\":\n                return binOp(\"number\", (a, b) => a - b);\n\n            case \"multiply\":\n                return binOp(\"number\", (a, b) => a * b);\n\n            case \"divide\":\n                return binOp(\"number\", (a, b) => a / b);\n\n            case \"modulus\":\n                return binOp(\"number\", (a, b) => a % b);\n\n            case \"power\":\n                return binOp(\"number\", (a, b) => a ** b);\n\n            case \"invoke\": {\n                const args = expression.args.reduce((accum, arg) => {\n                    if (arg.type === \"spread\") {\n                        const value = this.executeExpression(arg.expression, structure, symbolTable);\n                        // const value = arg.name !== null ? symbolTable[arg.name] : structure;\n\n                        if (Array.isArray(value)) {\n                            accum = accum.concat(value);\n                        }\n                        else {\n                            accum.push(value);\n                        }\n                    }\n                    else {\n                        accum.push(this.executeExpression(arg, structure, symbolTable));\n                    }\n\n                    return accum;\n                }, []);\n\n                if (expression.name in this.functions) {\n                    return this.invokeFunction(expression.name, args);\n                }\n\n                this.addError(`Tried to access unbound symbol: ${expression.name}`);\n                return FAILURE_VALUE;\n            }\n\n            case \"array\": {\n                const results = [];\n\n                for (const element of expression.value) {\n                    if (element.type === \"assignment\") {\n                        this.executeExpression(element, structure, symbolTable);\n                    }\n                    else {\n                        const value = this.executeExpression(element, structure, symbolTable);\n\n                        if (value === FAILURE_VALUE) {\n                            return FAILURE_VALUE;\n                        }\n\n                        results.push(value);\n                    }\n                }\n\n                return results;\n            }\n\n            case \"boolean\":\n            case \"null\":\n            case \"number\":\n            case \"string\":\n            case \"undefined\":\n                return expression.value;\n\n            case \"object\":\n                return this.executeObjectExpression(expression, structure, symbolTable);\n\n            default:\n                this.addError(`Unrecognized expression type: '${expression.type}'`);\n                return FAILURE_VALUE;\n        }\n    }\n\n    /**\n     * Execute an object pattern\n     *\n     * @param {Object} pattern\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {*}\n     */\n    executeObjectExpression(pattern, structure, symbolTable) {\n        const objectSymbolTable = Object.create(symbolTable);\n        const result = {};\n\n        for (const element of pattern.value) {\n            switch (element.type) {\n                case \"property\": {\n                    const name = this.executeExpression(element.name, structure, objectSymbolTable);\n\n                    if (name === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n                    else if (typeof name !== \"string\") {\n                        this.addError(`Property names must be string types: ${name}`);\n                        return FAILURE_VALUE;\n                    }\n\n                    const value = element.value !== null\n                        ? this.executeExpression(element.value, structure, objectSymbolTable)\n                        : symbolTable[name];\n\n                    if (value === FAILURE_VALUE) {\n                        this.addError(`Unable to evaluate value for property ${name}`);\n                        return FAILURE_VALUE;\n                    }\n\n                    result[name] = value;\n                    break;\n                }\n\n                case \"assignment\": {\n                    const value = this.executeExpression(element, structure, objectSymbolTable);\n\n                    if (value === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n                    break;\n                }\n\n                default:\n                    this.addError(`Unrecognized object expression element type: ${element.type}`);\n                    return FAILURE_VALUE;\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * Acquire the value of a type pattern from the specified structure. Any named entities will be populated in the\n     * specified symbolTable\n     *\n     * @param {object} pattern\n     * @param {*} structure\n     * @param {object} symbolTable\n     * @returns {*}\n     */\n    executePattern(pattern, structure, symbolTable) {\n        switch (pattern.patternType) {\n            case \"any\":\n                this.assign(symbolTable, pattern.assignTo, structure);\n                return structure;\n\n            case \"array\":\n                if (Array.isArray(structure)) {\n                    this.assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"array-pattern\": {\n                const result = this.executeArrayPattern(pattern, structure, symbolTable);\n\n                return result === FAILURE_VALUE ? FAILURE_VALUE : symbolTable;\n            }\n\n            case \"boolean\":\n                if (typeof structure === \"boolean\") {\n                    if (pattern.value === null || pattern.value === structure) {\n                        this.assign(symbolTable, pattern.assignTo, structure);\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"null\":\n                if (structure === null) {\n                    this.assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"number\":\n                if (typeof structure === \"number\") {\n                    if (pattern.value === null || pattern.value === structure) {\n                        this.assign(symbolTable, pattern.assignTo, structure);\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"object\":\n                if (isObject(structure)) {\n                    this.assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"object-pattern\": {\n                if (isObject(structure) === false) {\n                    return FAILURE_VALUE;\n                }\n\n                const result = {};\n\n                for (const property of pattern.value) {\n                    const {name, pattern: propertyPattern, assignTo} = property;\n\n                    if (name in structure) {\n                        const value = this.executePattern(propertyPattern, structure[name], symbolTable);\n\n                        if (value === FAILURE_VALUE) {\n                            return FAILURE_VALUE;\n                        }\n\n                        this.assign(symbolTable, assignTo, structure[name]);\n                        this.assign(result, assignTo, value);\n                    }\n                    else {\n                        return FAILURE_VALUE;\n                    }\n                }\n\n                this.assign(symbolTable, pattern.assignTo, structure);\n                return result;\n            }\n\n            case \"reference\":\n                if (pattern.value in this.patterns) {\n                    const referencedPattern = this.patterns[pattern.value];\n                    const result = this.executePattern(referencedPattern, structure, symbolTable);\n\n                    if (result !== FAILURE_VALUE) {\n                        this.assign(symbolTable, pattern.assignTo, result);\n                    }\n\n                    return result;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"string\":\n                if (typeof structure === \"string\") {\n                    if (pattern.value === null || pattern.value === structure) {\n                        this.assign(symbolTable, pattern.assignTo, structure);\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"undefined\":\n                // NOTE: Our current failure value is undefined, so this will be treated as an error. I can change\n                // FAILURE_VALUE to be a sigil. I'll just have to be careful to return undefined at the top-most level.\n                // I'm leaving this for now as this is probably not going to be used much\n                if (structure === undefined) {\n                    this.assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            default:\n                throw new TypeError(`unrecognized pattern type: '${pattern.type}'`);\n        }\n    }\n\n    /*\n     * Execute an array pattern\n     *\n     * @param {Object} pattern\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {*}\n     */\n    executeArrayPattern(pattern, structure, symbolTable) {\n        if (Array.isArray(structure) === false) {\n            return FAILURE_VALUE;\n        }\n\n        let result = [];\n        let index = 0;\n\n        for (const element of pattern.value) {\n            const results = this.executeArrayPatternElement(element, index, structure, symbolTable);\n\n            if (results === FAILURE_VALUE) {\n                return FAILURE_VALUE;\n            }\n\n            result = result.concat(results);\n            index += results.length;\n        }\n\n        if (index === structure.length) {\n            this.assign(symbolTable, pattern.assignTo, structure);\n            return result;\n        }\n\n        return FAILURE_VALUE;\n    }\n\n    /*\n     * Execute an element from an array pattern\n     *\n     * @param {Object} element\n     * @param {number} index\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {Array|undefined}\n     */\n    executeArrayPatternElement(element, index, structure, symbolTable) {\n        let result = [];\n\n        switch (element.type) {\n            case \"element\": {\n                const results = this.executeArrayElementPattern(element, index, structure, symbolTable);\n\n                if (results === FAILURE_VALUE) {\n                    return FAILURE_VALUE;\n                }\n\n                result = result.concat(results);\n                index += results.length;\n                break;\n            }\n\n            case \"element-group\": {\n                const results = this.executeArrayElementGroupPattern(element, index, structure, symbolTable);\n\n                if (results === FAILURE_VALUE) {\n                    return FAILURE_VALUE;\n                }\n\n                result = result.concat(results);\n                index += results.length;\n                break;\n            }\n\n            default:\n                this.addError(`Unrecognized array pattern element type: '${element.type}'`);\n                return FAILURE_VALUE;\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute array element pattern\n     *\n     * @param {Object} element\n     * @param {number} index\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {Array|undefined}\n     */\n    executeArrayElementPattern(element, index, structure, symbolTable) {\n        const {pattern, range: {start, stop}} = element;\n        const result = [];\n\n        for (let i = 0; i < stop; i++) {\n            const actualIndex = index + i;\n\n            // treat out-of-bounds like a failure\n            const value = (actualIndex < structure.length)\n                ? this.executePattern(pattern, structure[actualIndex], symbolTable)\n                : FAILURE_VALUE;\n\n            // if we processed enough, continue, else failure\n            if (value === FAILURE_VALUE) {\n                if (i >= start) {\n                    break;\n                }\n\n                return FAILURE_VALUE;\n            }\n\n            // save result\n            if (stop > 1) {\n                this.pushAssign(symbolTable, element.assignTo, value);\n            }\n            else {\n                this.assign(symbolTable, element.assignTo, value);\n            }\n            result.push(value);\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute array element group pattern\n     *\n     * @param {Object} element\n     * @param {number} index\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {Array|undefined}\n     */\n    executeArrayElementGroupPattern(group, index, structure, symbolTable) {\n        const {elements, range: {start, stop}} = group;\n        let result = [];\n\n        for (let i = 0; i < stop; i++) {\n            let groupResults = [];\n\n            // all elements must be successful\n            for (const element of elements) {\n                const elementSymbolTable = Object.create(symbolTable);\n                const results = this.executeArrayPatternElement(element, index, structure, elementSymbolTable);\n\n                if (results === FAILURE_VALUE) {\n                    groupResults = FAILURE_VALUE;\n                    break;\n                }\n\n                // copy result into main symbol table\n                if (element.assignTo !== null && element.assignTo !== undefined && element.assignTo in elementSymbolTable) {\n                    if (stop > 1) {\n                        // this.pushAssign(symbolTable, element.assignTo, results);\n                        this.pushAssign(symbolTable, element.assignTo, elementSymbolTable[element.assignTo]);\n                    }\n                    else {\n                        // this.assign(symbolTable, element.assignTo, results);\n                        this.assign(symbolTable, element.assignTo, elementSymbolTable[element.assignTo]);\n                    }\n                }\n\n                // collect everything that matched and advance to the next item to match\n                result = result.concat(results);\n                index += results.length;\n\n                // collect what we've matched in this group so far\n                groupResults = groupResults.concat(results);\n            }\n\n            if (groupResults === FAILURE_VALUE) {\n                // make sure we met our lower bounds criteria\n                if (i >= start) {\n                    // if we didn't process any elements, then we haven't created arrays in the symbol table for this\n                    // group or its elements.\n                    if (i === 0) {\n                        this.assign(symbolTable, group.assignTo, []);\n\n                        for (const element of elements) {\n                            this.assign(symbolTable, element.assignTo, []);\n                        }\n                    }\n\n                    return result;\n                }\n\n                return FAILURE_VALUE;\n            }\n\n            if (stop > 1) {\n                this.pushAssign(symbolTable, group.assignTo, groupResults);\n            }\n            else {\n                this.assign(symbolTable, group.assignTo, groupResults);\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * Invoke a user-defined method and return its value\n     *\n     * @param {string} type\n     * @param {Array} args\n     * @returns {*}\n     */\n    invokeFunction(type, args) {\n        if (type in this.functions) {\n            return this.functions[type](...args);\n        }\n\n        return FAILURE_VALUE;\n    }\n\n    /**\n     * Add a symbol/value to the symbol table, warning if an overwrite is occurring\n     *\n     * @param {Object} symbolTable\n     * @param {string} name\n     * @param {*} value\n     */\n    assign(symbolTable, name, value) {\n        if (name !== null && name !== undefined) {\n            /* eslint-disable-next-line no-prototype-builtins */\n            if (symbolTable.hasOwnProperty(name)) {\n                this.addWarning(`Overwriting ${name} with value: ${value}`);\n            }\n\n            symbolTable[name] = value;\n        }\n    }\n\n    /**\n     * Push a value onto the array at the name in the symbol table. If the name is not in the table already, an array will\n     * be created and then the value will be pushed to it. This is used for grouped elements.\n     *\n     * @param {Object} symbolTable\n     * @param {string} name\n     * @param {*} value\n     */\n    pushAssign(symbolTable, name, value) {\n        if (name !== null && name !== undefined) {\n            /* eslint-disable-next-line no-prototype-builtins */\n            const items = symbolTable.hasOwnProperty(name)\n                ? symbolTable[name]\n                : [];\n\n            if (Array.isArray(items)) {\n                items.push(value);\n\n                symbolTable[name] = items;\n            }\n            else {\n                this.addWarning(`Unable to push to ${name} because it is not an array: ${items}`);\n            }\n        }\n    }\n}\n","/**\n *  PathLexeme.js\n *\n *  @copyright 2002, 2013 Kevin Lindsey\n *  @module PathLexeme\n */\n\n/**\n *  PathLexeme\n */\nclass PathLexeme {\n    /**\n     *  PathLexeme\n     *\n     *  @param {number} type\n     *  @param {string} text\n     */\n    constructor(type, text) {\n        this.type = type;\n        this.text = text;\n    }\n\n    /**\n     *  Determine if this lexeme is of the given type\n     *\n     *  @param {number} type\n     *  @returns {boolean}\n     */\n    typeis(type) {\n        return this.type === type;\n    }\n}\n\n/*\n * token type enumerations\n */\nPathLexeme.UNDEFINED = 0;\nPathLexeme.COMMAND = 1;\nPathLexeme.NUMBER = 2;\nPathLexeme.EOD = 3;\n\nexport default PathLexeme;\n","/**\n *  PathLexer.js\n *\n *  @copyright 2003, 2013 Kevin Lindsey\n *  @module PathLexer\n */\n\nimport PathLexeme from \"./PathLexeme.js\";\n\n/**\n *  Create a new instance of PathLexer\n */\nclass PathLexer {\n    /**\n     *  @param {string} [pathData]\n     */\n    constructor(pathData) {\n        if (pathData === null || pathData === undefined) {\n            pathData = \"\";\n        }\n\n        this.setPathData(pathData);\n    }\n\n    /**\n     *  setPathData\n     *\n     *  @param {string} pathData\n     */\n    setPathData(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw new TypeError(\"The first parameter must be a string\");\n        }\n\n        this._pathData = pathData;\n    }\n\n    /**\n     *  getNextToken\n     *\n     *  @returns {PathLexeme}\n     */\n    getNextToken() {\n        let result = null;\n        let d = this._pathData;\n\n        while (result === null) {\n            if (d === null || d === \"\") {\n                result = new PathLexeme(PathLexeme.EOD, \"\");\n            }\n            else if (d.match(/^([ \\t\\r\\n,]+)/)) {\n                d = d.substr(RegExp.$1.length);\n            }\n            else if (d.match(/^([AaCcHhLlMmQqSsTtVvZz])/)) {\n                result = new PathLexeme(PathLexeme.COMMAND, RegExp.$1);\n                d = d.substr(RegExp.$1.length);\n            }\n            /* eslint-disable-next-line unicorn/no-unsafe-regex */\n            else if (d.match(/^(([-+]?\\d+(\\.\\d*)?|[-+]?\\.\\d+)([eE][-+]?\\d+)?)/)) {\n                result = new PathLexeme(PathLexeme.NUMBER, RegExp.$1);\n                d = d.substr(RegExp.$1.length);\n            }\n            else {\n                throw new SyntaxError(`Unrecognized path data: ${d}`);\n            }\n        }\n\n        this._pathData = d;\n\n        return result;\n    }\n}\n\nexport default PathLexer;\n","/**\n *  PathParser.js\n *\n *  @copyright 2003, 2017 Kevin Lindsey\n *  @module PathParser\n */\n\nimport PathLexer from \"./PathLexer.js\";\nimport PathLexeme from \"./PathLexeme.js\";\n\nconst BOP = \"BOP\";\n\n/**\n *  PathParser\n */\nclass PathParser {\n    /**\n     * constructor\n     */\n    constructor() {\n        this._lexer = new PathLexer();\n        this._handler = null;\n    }\n\n    /**\n     *  parseData\n     *\n     *  @param {string} pathData\n     *  @throws {Error}\n     */\n    parseData(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw new TypeError(`The first parameter must be a string: ${pathData}`);\n        }\n\n        // begin parse\n        if (this._handler !== null && typeof this._handler.beginParse === \"function\") {\n            this._handler.beginParse();\n        }\n\n        // pass the pathData to the lexer\n        const lexer = this._lexer;\n\n        lexer.setPathData(pathData);\n\n        // set mode to signify new path - Beginning Of Path\n        let mode = BOP;\n\n        // Process all tokens\n        let lastToken = null;\n        let token = lexer.getNextToken();\n\n        while (token.typeis(PathLexeme.EOD) === false) {\n            let parameterCount;\n            const params = [];\n\n            // process current token\n            switch (token.type) {\n                case PathLexeme.COMMAND:\n                    if (mode === BOP && token.text !== \"M\" && token.text !== \"m\") {\n                        throw new SyntaxError(`New paths must begin with a moveto command. Found '${token.text}'`);\n                    }\n\n                    // Set new parsing mode\n                    mode = token.text;\n\n                    // Get count of numbers that must follow this command\n                    parameterCount = PathParser.PARAMCOUNT[token.text.toUpperCase()];\n\n                    // Advance past command token\n                    token = lexer.getNextToken();\n                    break;\n\n                case PathLexeme.NUMBER:\n                    // Most commands allow you to keep repeating parameters\n                    // without specifying the command again.  We just assume\n                    // that is the case and do nothing since the mode remains\n                    // the same\n\n                    if (mode === BOP) {\n                        throw new SyntaxError(`New paths must begin with a moveto command. Found '${token.text}'`);\n                    }\n                    else {\n                        parameterCount = PathParser.PARAMCOUNT[mode.toUpperCase()];\n                    }\n                    break;\n\n                default:\n                    throw new SyntaxError(`Unrecognized command type: ${token.type}`);\n            }\n\n            // Get parameters\n            for (let i = 0; i < parameterCount; i++) {\n                switch (token.type) {\n                    case PathLexeme.COMMAND:\n                        throw new SyntaxError(`Parameter must be a number. Found '${token.text}'`);\n\n                    case PathLexeme.NUMBER:\n                        // convert current parameter to a float and add to\n                        // parameter list\n                        params[i] = parseFloat(token.text);\n                        break;\n\n                    case PathLexeme.EOD:\n                        throw new SyntaxError(\"Unexpected end of string\");\n\n                    default:\n                        throw new SyntaxError(`Unrecognized parameter type. Found type '${token.type}'`);\n                }\n\n                token = lexer.getNextToken();\n            }\n\n            // fire handler\n            if (this._handler !== null) {\n                const handler = this._handler;\n                const methodName = PathParser.METHODNAME[mode];\n\n                // convert types for arcs\n                if (mode === \"a\" || mode === \"A\") {\n                    params[3] = params[3] !== 0;\n                    params[4] = params[4] !== 0;\n                }\n\n                if (handler !== null && typeof handler[methodName] === \"function\") {\n                    handler[methodName](...params);\n                }\n            }\n\n            // Lineto's follow moveto when no command follows moveto params.  Go\n            // ahead and set the mode just in case no command follows the moveto\n            // command\n            switch (mode) {\n                case \"M\":\n                    mode = \"L\";\n                    break;\n                case \"m\":\n                    mode = \"l\";\n                    break;\n                case \"Z\":\n                case \"z\":\n                    mode = \"BOP\";\n                    break;\n                default:\n                    // ignore for now\n            }\n\n            if (token === lastToken) {\n                throw new SyntaxError(`Parser stalled on '${token.text}'`);\n            }\n            else {\n                lastToken = token;\n            }\n        }\n\n        // end parse\n        if (this._handler !== null && typeof this._handler.endParse === \"function\") {\n            this._handler.endParse();\n        }\n    }\n\n    /**\n     *  setHandler\n     *\n     *  @param {Object} handler\n     */\n    setHandler(handler) {\n        this._handler = handler;\n    }\n}\n\n/*\n * class constants\n */\nPathParser.PARAMCOUNT = {\n    A: 7,\n    C: 6,\n    H: 1,\n    L: 2,\n    M: 2,\n    Q: 4,\n    S: 4,\n    T: 2,\n    V: 1,\n    Z: 0\n};\nPathParser.METHODNAME = {\n    A: \"arcAbs\",\n    a: \"arcRel\",\n    C: \"curvetoCubicAbs\",\n    c: \"curvetoCubicRel\",\n    H: \"linetoHorizontalAbs\",\n    h: \"linetoHorizontalRel\",\n    L: \"linetoAbs\",\n    l: \"linetoRel\",\n    M: \"movetoAbs\",\n    m: \"movetoRel\",\n    Q: \"curvetoQuadraticAbs\",\n    q: \"curvetoQuadraticRel\",\n    S: \"curvetoCubicSmoothAbs\",\n    s: \"curvetoCubicSmoothRel\",\n    T: \"curvetoQuadraticSmoothAbs\",\n    t: \"curvetoQuadraticSmoothRel\",\n    V: \"linetoVerticalAbs\",\n    v: \"linetoVerticalRel\",\n    Z: \"closePath\",\n    z: \"closePath\"\n};\n\nexport default PathParser;\n","/**\n *  PathHandler.js\n *\n *  @copyright 2017 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\n\nconst TWO_PI = 2.0 * Math.PI;\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n* @typedef {GenericArray} EllipticalArc\n* @property {number} 0 x\n* @property {number} 1 y\n* @property {number} 2 rx\n* @property {number} 3 ry\n* @property {number} 4 theta\n* @property {number} 5 thetaWithDelta\n*/\n\n/**\n * Based on the SVG 1.1 specification, Appendix F: Implementation Requirements,\n * Section F.6 \"Elliptical arc implementation notes\"\n * {@see https://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes}\n *\n * @param {module:kld-affine.Point2D} startPoint\n * @param {module:kld-affine.Point2D} endPoint\n * @param {number} rx\n * @param {number} ry\n * @param {number} angle\n * @param {boolean} arcFlag\n * @param {boolean} sweepFlag\n * @returns {EllipticalArc}\n */\nfunction getArcParameters(startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {\n    angle = angle * Math.PI / 180;\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const TOLERANCE = 1e-6;\n\n    // Section (F.6.5.1)\n    const halfDiff = startPoint.subtract(endPoint).multiply(0.5);\n    const x1p = halfDiff.x * c + halfDiff.y * s;\n    const y1p = halfDiff.x * -s + halfDiff.y * c;\n\n    // Section (F.6.6.1)\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    // Section (F.6.6.2)\n    const x1px1p = x1p * x1p;\n    const y1py1p = y1p * y1p;\n    const lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));\n\n    // Section (F.6.6.3)\n    if (lambda > 1) {\n        const factor = Math.sqrt(lambda);\n\n        rx *= factor;\n        ry *= factor;\n    }\n\n    // Section (F.6.5.2)\n    const rxrx = rx * rx;\n    const ryry = ry * ry;\n    const rxy1 = rxrx * y1py1p;\n    const ryx1 = ryry * x1px1p;\n\n    let factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);\n\n    if (Math.abs(factor) < TOLERANCE) {\n        factor = 0;\n    }\n\n    let sq = Math.sqrt(factor);\n\n    if (arcFlag === sweepFlag) {\n        sq = -sq;\n    }\n\n    // Section (F.6.5.3)\n    const mid = startPoint.add(endPoint).multiply(0.5);\n    const cxp = sq * rx * y1p / ry;\n    const cyp = sq * -ry * x1p / rx;\n\n    // Section (F.6.5.5 - F.6.5.6)\n    const xcr1 = (x1p - cxp) / rx;\n    const xcr2 = (x1p + cxp) / rx;\n    const ycr1 = (y1p - cyp) / ry;\n    const ycr2 = (y1p + cyp) / ry;\n\n    const theta1 = new Vector2D(1, 0).angleBetween(new Vector2D(xcr1, ycr1));\n    let deltaTheta = normalizeAngle(new Vector2D(xcr1, ycr1).angleBetween(new Vector2D(-xcr2, -ycr2)));\n\n    if (sweepFlag === false) {\n        deltaTheta -= TWO_PI;\n    }\n\n    return [\n        cxp * c - cyp * s + mid.x,\n        cxp * s + cyp * c + mid.y,\n        rx,\n        ry,\n        theta1,\n        theta1 + deltaTheta\n    ];\n}\n\n/**\n *  PathHandler\n */\nclass PathHandler {\n    /**\n     * PathHandler\n     *\n     * @param {ShapeInfo} shapeCreator\n     */\n    constructor(shapeCreator) {\n        this.shapeCreator = shapeCreator;\n        this.shapes = [];\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n        this.lastCommand = null;\n    }\n\n    /**\n     * beginParse\n     */\n    beginParse() {\n        // zero out the sub-path array\n        this.shapes = [];\n\n        // clear firstX, firstY, lastX, and lastY\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n\n        // need to remember last command type to determine how to handle the\n        // relative Bezier commands\n        this.lastCommand = null;\n    }\n\n    /**\n     *  addShape\n     *\n     *  @param {ShapeInfo} shape\n     */\n    addShape(shape) {\n        this.shapes.push(shape);\n    }\n\n    /**\n     *  arcAbs - A\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcAbs(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(this.shapeCreator.line(\n                this.lastX, this.lastY,\n                x, y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(x, y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(this.shapeCreator.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"A\";\n        this.lastX = x;\n        this.lastY = y;\n    }\n\n    /**\n     *  arcRel - a\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcRel(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(this.shapeCreator.line(\n                this.lastX, this.lastY,\n                this.lastX + x, this.lastY + y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(this.lastX + x, this.lastY + y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(this.shapeCreator.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"a\";\n        this.lastX += x;\n        this.lastY += y;\n    }\n\n    /**\n     *  curvetoCubicAbs - C\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicAbs(x1, y1, x2, y2, x, y) {\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"C\";\n    }\n\n    /**\n     *  curvetoCubicRel - c\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicRel(x1, y1, x2, y2, x, y) {\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"c\";\n    }\n\n    /**\n     *  linetoHorizontalAbs - H\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalAbs(x) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            x, this.lastY\n        ));\n\n        this.lastX = x;\n        this.lastCommand = \"H\";\n    }\n\n    /**\n     *  linetoHorizontalRel - h\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalRel(x) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY\n        ));\n\n        this.lastX += x;\n        this.lastCommand = \"h\";\n    }\n\n    /**\n     *  linetoAbs - L\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoAbs(x, y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"L\";\n    }\n\n    /**\n     *  linetoRel - l\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoRel(x, y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"l\";\n    }\n\n    /**\n     *  movetoAbs - M\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoAbs(x, y) {\n        this.firstX = x;\n        this.firstY = y;\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"M\";\n    }\n\n    /**\n     *  movetoRel - m\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoRel(x, y) {\n        this.firstX += x;\n        this.firstY += y;\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"m\";\n    }\n\n    /**\n     *  curvetoQuadraticAbs - Q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticAbs(x1, y1, x, y) {\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"Q\";\n    }\n\n    /**\n     *  curvetoQuadraticRel - q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticRel(x1, y1, x, y) {\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"q\";\n    }\n\n    /**\n     *  curvetoCubicSmoothAbs - S\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothAbs(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"S\";\n    }\n\n    /**\n     *  curvetoCubicSmoothRel - s\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothRel(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"s\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothAbs - T\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothAbs(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"T\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothRel - t\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothRel(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(this.shapeCreator.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"t\";\n    }\n\n    /**\n     *  linetoVerticalAbs - V\n     *\n     *  @param {number} y\n     */\n    linetoVerticalAbs(y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX, y\n        ));\n\n        this.lastY = y;\n\n        this.lastCommand = \"V\";\n    }\n\n    /**\n     *  linetoVerticalRel - v\n     *\n     *  @param {number} y\n     */\n    linetoVerticalRel(y) {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.lastX, this.lastY + y\n        ));\n\n        this.lastY += y;\n\n        this.lastCommand = \"v\";\n    }\n\n    /**\n     *  closePath - z or Z\n     */\n    closePath() {\n        this.addShape(this.shapeCreator.line(\n            this.lastX, this.lastY,\n            this.firstX, this.firstY\n        ));\n\n        this.lastX = this.firstX;\n        this.lastY = this.firstY;\n        this.lastCommand = \"z\";\n    }\n}\n\nexport default PathHandler;\n","/**\n *  ShapeInfo.js\n *  @copyright 2002, 2017 Kevin Lindsey\n */\n\nimport {Point2D} from \"kld-affine\";\nimport {Transformer, FAILURE_VALUE} from \"gp-data-transformer\";\nimport {PathParser} from \"kld-path-parser\";\nimport PathHandler from \"./PathHandler.js\";\nimport transformSource from \"./TransformSource.js\";\n\nconst degree90 = Math.PI * 0.5;\n\n/**\n *  ShapeInfo\n *  @memberof module:kld-intersections\n */\nexport default class ShapeInfo {\n    /**\n     *  @param {string} name\n     *  @param {GenericArray} args\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    constructor(name, args) {\n        this.name = name;\n        this.args = args;\n    }\n\n    static arc(...args) {\n        return create(ShapeInfo.ARC, args, [\"center\", \"radiusX\", \"radiusY\", \"startRadians\", \"endRadians\"]);\n    }\n\n    static quadraticBezier(...args) {\n        return create(ShapeInfo.QUADRATIC_BEZIER, args, [\"p1\", \"p2\", \"p3\"]);\n    }\n\n    static cubicBezier(...args) {\n        return create(ShapeInfo.CUBIC_BEZIER, args, [\"p1\", \"p2\", \"p3\", \"p4\"]);\n    }\n\n    static circle(...args) {\n        return create(ShapeInfo.CIRCLE, args, [\"center\", \"radius\"]);\n    }\n\n    static ellipse(...args) {\n        return create(ShapeInfo.ELLIPSE, args, [\"center\", \"radiusX\", \"radiusY\"]);\n    }\n\n    static line(...args) {\n        return create(ShapeInfo.LINE, args, [\"p1\", \"p2\"]);\n    }\n\n    static path(...args) {\n        return create(ShapeInfo.PATH, args, [\"segments\"]);\n    }\n\n    static polygon(...args) {\n        return create(ShapeInfo.POLYGON, args, [\"points\"]);\n    }\n\n    static polyline(...args) {\n        return create(ShapeInfo.POLYLINE, args, [\"points\"]);\n    }\n\n    static rectangle(...args) {\n        const result = create(ShapeInfo.RECTANGLE, args, [\"topLeft\", \"bottomRight\", \"rx\", \"ry\"]);\n\n        let ry = result.args.pop();\n        let rx = result.args.pop();\n\n        rx = rx === undefined ? 0 : rx;\n        ry = ry === undefined ? 0 : ry;\n\n        if (rx === 0 && ry === 0) {\n            return result;\n        }\n\n        const {x: p1x, y: p1y} = result.args[0];\n        const {x: p2x, y: p2y} = result.args[1];\n        const width = p2x - p1x;\n        const height = p2y - p1y;\n\n        if (rx === 0) {\n            rx = ry;\n        }\n        if (ry === 0) {\n            ry = rx;\n        }\n        if (rx > width * 0.5) {\n            rx = width * 0.5;\n        }\n        if (ry > height * 0.5) {\n            ry = height * 0.5;\n        }\n\n        const x0 = p1x;\n        const y0 = p1y;\n        const x1 = p1x + rx;\n        const y1 = p1y + ry;\n        const x2 = p2x - rx;\n        const y2 = p2y - ry;\n        const x3 = p2x;\n        const y3 = p2y;\n\n        const segments = [\n            ShapeInfo.arc(x1, y1, rx, ry, 2 * degree90, 3 * degree90),\n            ShapeInfo.line(x1, y0, x2, y0),\n            ShapeInfo.arc(x2, y1, rx, ry, 3 * degree90, 4 * degree90),\n            ShapeInfo.line(x3, y1, x3, y2),\n            ShapeInfo.arc(x2, y2, rx, ry, 0, degree90),\n            ShapeInfo.line(x2, y3, x1, y3),\n            ShapeInfo.arc(x1, y2, rx, ry, degree90, 2 * degree90),\n            ShapeInfo.line(x0, y2, x0, y1)\n        ];\n\n        return new ShapeInfo(ShapeInfo.PATH, segments);\n    }\n}\n\n/**\n * Create a shape\n *\n * @param {string} type\n * @param {GenericArray} object\n * @param {Array<string>} properties\n * @returns {ShapeInfo}\n */\nfunction create(type, object, properties) {\n    let transformType;\n\n    if (object.length === 1) {\n        object = object[0];\n\n        transformType = Array.isArray(object) || typeof object === \"string\"\n            ? type + \"Args\"\n            : type;\n    }\n    else {\n        transformType = type + \"Args\";\n    }\n\n    // normalize the data\n    const data = transformer.execute(transformType, object);\n\n    if (data === FAILURE_VALUE) {\n        // for (const message of transformer.messages) {\n        //     console.log(message);\n        // }\n\n        throw new TypeError(`${type} is not in a recognizable format: ${JSON.stringify(object)}`);\n    }\n\n    // pull out the arguments\n    const args = properties.length === 1\n        ? data[properties[0]]\n        : properties.map(name => data[name]);\n\n    // return a new ShapeInfo\n    return new ShapeInfo(type, args);\n}\n\n// define shape name constants\nShapeInfo.ARC = \"Arc\";\nShapeInfo.QUADRATIC_BEZIER = \"Bezier2\";\nShapeInfo.CUBIC_BEZIER = \"Bezier3\";\nShapeInfo.CIRCLE = \"Circle\";\nShapeInfo.ELLIPSE = \"Ellipse\";\nShapeInfo.LINE = \"Line\";\nShapeInfo.PATH = \"Path\";\nShapeInfo.POLYGON = \"Polygon\";\nShapeInfo.POLYLINE = \"Polyline\";\nShapeInfo.RECTANGLE = \"Rectangle\";\n\n// create shape argument normalizer\nconst transformer = new Transformer();\ntransformer.execute(transformSource);\n\n// attach custom generators\ntransformer.addFunction(\"Point2D\", (x, y) => new Point2D(x, y));\ntransformer.addFunction(\"PathData\", pathData => {\n    const parser = new PathParser();\n    const handler = new PathHandler(ShapeInfo);\n\n    parser.setHandler(handler);\n    parser.parseData(pathData);\n\n    return handler.shapes;\n});\n","/* eslint-disable camelcase, no-labels */\n/**\n *\n *  Intersection.js\n *\n *  copyright 2002, 2013 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport {Polynomial} from \"kld-polynomial\";\nimport ShapeInfo from \"./ShapeInfo.js\";\n\nconst TWO_PI = 2.0 * Math.PI;\nconst UNIT_X = new Vector2D(1, 0);\n\n/**\n * @memberof module:kld-intersections.Intersection\n * @param {any} o\n * @returns {boolean}\n */\nfunction isNullish(o) {\n    return o === null || o === undefined;\n}\n\n/**\n *  bezout\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.magic-software.com\n *\n *  @param {Array<module:kld-intersections.Point2D>} e1\n *  @param {Array<module:kld-intersections.Point2D>} e2\n *  @returns {external:Polynomial}\n */\nfunction bezout(e1, e2) {\n    const AB = e1[0] * e2[1] - e2[0] * e1[1];\n    const AC = e1[0] * e2[2] - e2[0] * e1[2];\n    const AD = e1[0] * e2[3] - e2[0] * e1[3];\n    const AE = e1[0] * e2[4] - e2[0] * e1[4];\n    const AF = e1[0] * e2[5] - e2[0] * e1[5];\n    const BC = e1[1] * e2[2] - e2[1] * e1[2];\n    const BE = e1[1] * e2[4] - e2[1] * e1[4];\n    const BF = e1[1] * e2[5] - e2[1] * e1[5];\n    const CD = e1[2] * e2[3] - e2[2] * e1[3];\n    const DE = e1[3] * e2[4] - e2[3] * e1[4];\n    const DF = e1[3] * e2[5] - e2[3] * e1[5];\n    const BFpDE = BF + DE;\n    const BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB * BC - AC * AC,\n        AB * BEmCD + AD * BC - 2 * AC * AE,\n        AB * BFpDE + AD * BEmCD - AE * AE - 2 * AC * AF,\n        AB * DF + AD * BFpDE - 2 * AE * AF,\n        AD * DF - AF * AF\n    );\n}\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n * restrictPointsToArc\n *\n * @param {module:kld-intersections.Intersection} intersections\n * @param {module:kld-intersections.Point2D} center\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} startRadians\n * @param {number} endRadians\n * @returns {module:kld-intersections.Intersection}\n */\nfunction restrictPointsToArc(intersections, center, radiusX, radiusY, startRadians, endRadians) {\n    if (intersections.points.length === 0) {\n        return intersections;\n    }\n\n    const result = new Intersection(\"No Intersection\");\n    const startNormal = normalizeAngle(startRadians);\n    let endNormal = normalizeAngle(endRadians);\n\n    // Advance end angle one turn if it's lower than the start angle so our interval test will work correctly\n    if (endNormal < startNormal) {\n        endNormal += TWO_PI;\n    }\n\n    for (const p of intersections.points) {\n        const a = normalizeAngle(UNIT_X.angleBetween(Vector2D.fromPoints(center, p)));\n\n        if (startNormal <= a && a <= endNormal) {\n            result.appendPoint(p);\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n}\n\n/**\n *  closePolygon\n *  @memberof module:kld-intersections.Intersection\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {Array<module:kld-intersections.Point2D>}\n */\nfunction closePolygon(points) {\n    const copy = points.slice();\n\n    copy.push(points[0]);\n\n    return copy;\n}\n\n/**\n * Intersection\n * @memberof module:kld-intersections\n */\nclass Intersection {\n    /**\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    constructor(status) {\n        this.init(status);\n    }\n\n\n    /**\n     *  init\n     *\n     *  @param {string} status\n     */\n    init(status) {\n        this.status = status;\n        this.points = [];\n    }\n\n    /**\n     *  intersect\n     *\n     *  @param {module:kld-intersections.ShapeInfo} shape1\n     *  @param {module:kld-intersections.ShapeInfo} shape2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersect(shape1, shape2) {\n        let result;\n\n        if (!isNullish(shape1) && !isNullish(shape2)) {\n            if (shape1.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape2, shape1);\n            }\n            else if (shape1.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape2, shape1);\n            }\n            else {\n                let method;\n                let args;\n\n                if (shape1.name < shape2.name) {\n                    method = \"intersect\" + shape1.name + shape2.name;\n                    args = shape1.args.concat(shape2.args);\n                }\n                else {\n                    method = \"intersect\" + shape2.name + shape1.name;\n                    args = shape2.args.concat(shape1.args);\n                }\n\n                if (!(method in Intersection)) {\n                    throw new TypeError(\"Intersection not available: \" + method);\n                }\n\n                result = Intersection[method].apply(null, args);\n            }\n        }\n        else {\n            result = new Intersection(\"No Intersection\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPathShape\n     *\n     *  @param {module:kld-intersections.ShapeInfo} path\n     *  @param {module:kld-intersections.ShapeInfo} shape\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPathShape(path, shape) {\n        const result = new Intersection(\"No Intersection\");\n\n        for (const segment of path.args) {\n            const inter = Intersection.intersect(segment, shape);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     * intersectArcShape\n     *\n     * @param {module:kld-intersections.ShapeInfo} arc\n     * @param {module:kld-intersections.ShapeInfo} shape\n     * @returns {module:kld-intersections.Intersection}\n     */\n    static intersectArcShape(arc, shape) {\n        const [center, radiusX, radiusY, startRadians, endRadians] = arc.args;\n        const ellipse = new ShapeInfo(ShapeInfo.ELLIPSE, [center, radiusX, radiusY]);\n        const ellipse_result = Intersection.intersect(ellipse, shape);\n\n        // return ellipse_result;\n        return restrictPointsToArc(ellipse_result, center, radiusX, radiusY, startRadians, endRadians);\n    }\n\n    /**\n     *  intersectBezier2Bezier2\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier2(a1, a2, a3, b1, b2, b3) {\n        let a, b;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b2.multiply(-2);\n        const c22 = b1.add(a.add(b3));\n\n        a = b1.multiply(-2);\n        b = b2.multiply(2);\n        const c21 = a.add(b);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c12.x * c11.y - c11.x * c12.y;\n        b = c22.x * c11.y - c11.x * c22.y;\n        const c = c21.x * c11.y - c11.x * c21.y;\n        const d = c11.x * (c10.y - c20.y) + c11.y * (-c10.x + c20.x);\n        const e = c22.x * c12.y - c12.x * c22.y;\n        const f = c21.x * c12.y - c12.x * c21.y;\n        const g = c12.x * (c10.y - c20.y) + c12.y * (-c10.x + c20.x);\n\n        // determinant\n        const poly = new Polynomial(\n            -e * e,\n            -2 * e * f,\n            a * b - f * f - 2 * e * g,\n            a * c - 2 * f * g,\n            a * d - g * g\n        );\n\n        const roots = poly.getRoots();\n\n        for (const s of roots) {\n            if (0 <= s && s <= 1) {\n                const xp = new Polynomial(\n                    c12.x,\n                    c11.x,\n                    c10.x - c20.x - s * c21.x - s * s * c22.x\n                );\n                xp.simplifyEquals();\n                const xRoots = xp.getRoots();\n                const yp = new Polynomial(\n                    c12.y,\n                    c11.y,\n                    c10.y - c20.y - s * c21.y - s * s * c22.y\n                );\n                yp.simplifyEquals();\n                const yRoots = yp.getRoots();\n\n                if (xRoots.length > 0 && yRoots.length > 0) {\n                    const TOLERANCE = 1e-4;\n\n                    checkRoots:\n                    for (const xRoot of xRoots) {\n                        if (0 <= xRoot && xRoot <= 1) {\n                            for (const yRoot of yRoots) {\n                                if (Math.abs(xRoot - yRoot) < TOLERANCE) {\n                                    result.points.push(c22.multiply(s * s).add(c21.multiply(s).add(c20)));\n                                    break checkRoots;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier3(a1, a2, a3, b1, b2, b3, b4) {\n        let a, b, c, d;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        const c10x2 = c10.x * c10.x;\n        const c10y2 = c10.y * c10.y;\n        const c11x2 = c11.x * c11.x;\n        const c11y2 = c11.y * c11.y;\n        const c12x2 = c12.x * c12.x;\n        const c12y2 = c12.y * c12.y;\n        const c20x2 = c20.x * c20.x;\n        const c20y2 = c20.y * c20.y;\n        const c21x2 = c21.x * c21.x;\n        const c21y2 = c21.y * c21.y;\n        const c22x2 = c22.x * c22.x;\n        const c22y2 = c22.y * c22.y;\n        const c23x2 = c23.x * c23.x;\n        const c23y2 = c23.y * c23.y;\n\n        const poly = new Polynomial(\n            -2 * c12.x * c12.y * c23.x * c23.y + c12x2 * c23y2 + c12y2 * c23x2,\n            -2 * c12.x * c12.y * c22.x * c23.y - 2 * c12.x * c12.y * c22.y * c23.x + 2 * c12y2 * c22.x * c23.x +\n                2 * c12x2 * c22.y * c23.y,\n            -2 * c12.x * c21.x * c12.y * c23.y - 2 * c12.x * c12.y * c21.y * c23.x - 2 * c12.x * c12.y * c22.x * c22.y +\n                2 * c21.x * c12y2 * c23.x + c12y2 * c22x2 + c12x2 * (2 * c21.y * c23.y + c22y2),\n            2 * c10.x * c12.x * c12.y * c23.y + 2 * c10.y * c12.x * c12.y * c23.x + c11.x * c11.y * c12.x * c23.y +\n                c11.x * c11.y * c12.y * c23.x - 2 * c20.x * c12.x * c12.y * c23.y - 2 * c12.x * c20.y * c12.y * c23.x -\n                2 * c12.x * c21.x * c12.y * c22.y - 2 * c12.x * c12.y * c21.y * c22.x - 2 * c10.x * c12y2 * c23.x -\n                2 * c10.y * c12x2 * c23.y + 2 * c20.x * c12y2 * c23.x + 2 * c21.x * c12y2 * c22.x -\n                c11y2 * c12.x * c23.x - c11x2 * c12.y * c23.y + c12x2 * (2 * c20.y * c23.y + 2 * c21.y * c22.y),\n            2 * c10.x * c12.x * c12.y * c22.y + 2 * c10.y * c12.x * c12.y * c22.x + c11.x * c11.y * c12.x * c22.y +\n                c11.x * c11.y * c12.y * c22.x - 2 * c20.x * c12.x * c12.y * c22.y - 2 * c12.x * c20.y * c12.y * c22.x -\n                2 * c12.x * c21.x * c12.y * c21.y - 2 * c10.x * c12y2 * c22.x - 2 * c10.y * c12x2 * c22.y +\n                2 * c20.x * c12y2 * c22.x - c11y2 * c12.x * c22.x - c11x2 * c12.y * c22.y + c21x2 * c12y2 +\n                c12x2 * (2 * c20.y * c22.y + c21y2),\n            2 * c10.x * c12.x * c12.y * c21.y + 2 * c10.y * c12.x * c21.x * c12.y + c11.x * c11.y * c12.x * c21.y +\n                c11.x * c11.y * c21.x * c12.y - 2 * c20.x * c12.x * c12.y * c21.y - 2 * c12.x * c20.y * c21.x * c12.y -\n                2 * c10.x * c21.x * c12y2 - 2 * c10.y * c12x2 * c21.y + 2 * c20.x * c21.x * c12y2 -\n                c11y2 * c12.x * c21.x - c11x2 * c12.y * c21.y + 2 * c12x2 * c20.y * c21.y,\n            -2 * c10.x * c10.y * c12.x * c12.y - c10.x * c11.x * c11.y * c12.y - c10.y * c11.x * c11.y * c12.x +\n                2 * c10.x * c12.x * c20.y * c12.y + 2 * c10.y * c20.x * c12.x * c12.y + c11.x * c20.x * c11.y * c12.y +\n                c11.x * c11.y * c12.x * c20.y - 2 * c20.x * c12.x * c20.y * c12.y - 2 * c10.x * c20.x * c12y2 +\n                c10.x * c11y2 * c12.x + c10.y * c11x2 * c12.y - 2 * c10.y * c12x2 * c20.y -\n                c20.x * c11y2 * c12.x - c11x2 * c20.y * c12.y + c10x2 * c12y2 + c10y2 * c12x2 +\n                c20x2 * c12y2 + c12x2 * c20y2\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            ).getRoots();\n            const yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            ).getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (const yRoot of yRoots) {\n                            if (Math.abs(xRoot - yRoot) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Circle(p1, p2, p3, c, r) {\n        return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n    }\n\n    /**\n     *  intersectBezier2Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Ellipse(p1, p2, p3, ec, rx, ry) {\n        let a; // temporary variables\n        // c2, c1, c0; // coefficients of quadratic\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const roots = new Polynomial(\n            ryry * c2.x * c2.x + rxrx * c2.y * c2.y,\n            2 * (ryry * c2.x * c1.x + rxrx * c2.y * c1.y),\n            ryry * (2 * c2.x * c0.x + c1.x * c1.x) + rxrx * (2 * c2.y * c0.y + c1.y * c1.y) -\n                2 * (ryry * ec.x * c2.x + rxrx * ec.y * c2.y),\n            2 * (ryry * c1.x * (c0.x - ec.x) + rxrx * c1.y * (c0.y - ec.y)),\n            ryry * (c0.x * c0.x + ec.x * ec.x) + rxrx * (c0.y * c0.y + ec.y * ec.y) -\n                2 * (ryry * ec.x * c0.x + rxrx * ec.y * c0.y) - rxrx * ryry\n        ).getRoots();\n\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                result.points.push(c2.multiply(t * t).add(c1.multiply(t).add(c0)));\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Line\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Line(p1, p2, p3, a1, a2) {\n        let a; // temporary variables\n        // let c2, c1, c0; // coefficients of quadratic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // Transform cubic coefficients to line's coordinate system and find roots\n        // of cubic\n        const roots = new Polynomial(\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p4 = p1.lerp(p2, t);\n                const p5 = p2.lerp(p3, t);\n\n                const p6 = p4.lerp(p5, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p6\n                if (a1.x === a2.x) {\n                    if (min.y <= p6.y && p6.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p6.x && p6.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p6);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polygon(p1, p2, p3, points) {\n        return Intersection.intersectBezier2Polyline(p1, p2, p3, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier2Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polyline(p1, p2, p3, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Rectangle(p1, p2, p3, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n        const inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n        const inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} a4\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Bezier3(a1, a2, a3, a4, b1, b2, b3, b4) {\n        let a, b, c, d; // temporary variables\n        // c13, c12, c11, c10; // coefficients of cubic\n        // c23, c22, c21, c20; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = a1.multiply(-1);\n        b = a2.multiply(3);\n        c = a3.multiply(-3);\n        d = a.add(b.add(c.add(a4)));\n        const c13 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(3);\n        b = a2.multiply(-6);\n        c = a3.multiply(3);\n        d = a.add(b.add(c));\n        const c12 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(-3);\n        b = a2.multiply(3);\n        c = a.add(b);\n        const c11 = new Point2D(c.x, c.y);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c13.x * c12.y - c12.x * c13.y;\n        b = c13.x * c11.y - c11.x * c13.y;\n        const c0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const c1 = c21.x * c13.y - c13.x * c21.y;\n        const c2 = c22.x * c13.y - c13.x * c22.y;\n        const c3 = c23.x * c13.y - c13.x * c23.y;\n        d = c13.x * c11.y - c11.x * c13.y;\n        const e0 = c13.x * c10.y + c12.x * c11.y - c11.x * c12.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const e1 = c21.x * c13.y - c13.x * c21.y;\n        const e2 = c22.x * c13.y - c13.x * c22.y;\n        const e3 = c23.x * c13.y - c13.x * c23.y;\n        const f0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const f1 = c21.x * c12.y - c12.x * c21.y;\n        const f2 = c22.x * c12.y - c12.x * c22.y;\n        const f3 = c23.x * c12.y - c12.x * c23.y;\n        const g0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const g1 = c21.x * c13.y - c13.x * c21.y;\n        const g2 = c22.x * c13.y - c13.x * c22.y;\n        const g3 = c23.x * c13.y - c13.x * c23.y;\n        const h0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const h1 = c21.x * c12.y - c12.x * c21.y;\n        const h2 = c22.x * c12.y - c12.x * c22.y;\n        const h3 = c23.x * c12.y - c12.x * c23.y;\n        const i0 = c11.x * c10.y - c10.x * c11.y + c20.x * c11.y - c11.x * c20.y;\n        const i1 = c21.x * c11.y - c11.x * c21.y;\n        const i2 = c22.x * c11.y - c11.x * c22.y;\n        const i3 = c23.x * c11.y - c11.x * c23.y;\n\n        // determinant\n        const poly = new Polynomial(\n            -c3 * e3 * g3,\n            -c3 * e3 * g2 - c3 * e2 * g3 - c2 * e3 * g3,\n            -c3 * e3 * g1 - c3 * e2 * g2 - c2 * e3 * g2 - c3 * e1 * g3 - c2 * e2 * g3 - c1 * e3 * g3,\n            -c3 * e3 * g0 - c3 * e2 * g1 - c2 * e3 * g1 - c3 * e1 * g2 - c2 * e2 * g2 - c1 * e3 * g2 - c3 * e0 * g3 - c2 * e1 * g3 - c1 * e2 * g3 - c0 * e3 * g3 + b * f3 * g3 + c3 * d * h3 - a * f3 * h3 + a * e3 * i3,\n            -c3 * e2 * g0 - c2 * e3 * g0 - c3 * e1 * g1 - c2 * e2 * g1 - c1 * e3 * g1 - c3 * e0 * g2 - c2 * e1 * g2 - c1 * e2 * g2 - c0 * e3 * g2 + b * f3 * g2 - c2 * e0 * g3 - c1 * e1 * g3 - c0 * e2 * g3 + b * f2 * g3 + c3 * d * h2 - a * f3 * h2 + c2 * d * h3 - a * f2 * h3 + a * e3 * i2 + a * e2 * i3,\n            -c3 * e1 * g0 - c2 * e2 * g0 - c1 * e3 * g0 - c3 * e0 * g1 - c2 * e1 * g1 - c1 * e2 * g1 - c0 * e3 * g1 + b * f3 * g1 - c2 * e0 * g2 - c1 * e1 * g2 - c0 * e2 * g2 + b * f2 * g2 - c1 * e0 * g3 - c0 * e1 * g3 + b * f1 * g3 + c3 * d * h1 - a * f3 * h1 + c2 * d * h2 - a * f2 * h2 + c1 * d * h3 - a * f1 * h3 + a * e3 * i1 + a * e2 * i2 + a * e1 * i3,\n            -c3 * e0 * g0 - c2 * e1 * g0 - c1 * e2 * g0 - c0 * e3 * g0 + b * f3 * g0 - c2 * e0 * g1 - c1 * e1 * g1 - c0 * e2 * g1 + b * f2 * g1 - c1 * e0 * g2 - c0 * e1 * g2 + b * f1 * g2 - c0 * e0 * g3 + b * f0 * g3 + c3 * d * h0 - a * f3 * h0 + c2 * d * h1 - a * f2 * h1 + c1 * d * h2 - a * f1 * h2 + c0 * d * h3 - a * f0 * h3 + a * e3 * i0 + a * e2 * i1 + a * e1 * i2 - b * d * i3 + a * e0 * i3,\n            -c2 * e0 * g0 - c1 * e1 * g0 - c0 * e2 * g0 + b * f2 * g0 - c1 * e0 * g1 - c0 * e1 * g1 + b * f1 * g1 - c0 * e0 * g2 + b * f0 * g2 + c2 * d * h0 - a * f2 * h0 + c1 * d * h1 - a * f1 * h1 + c0 * d * h2 - a * f0 * h2 + a * e2 * i0 + a * e1 * i1 - b * d * i2 + a * e0 * i2,\n            -c1 * e0 * g0 - c0 * e1 * g0 + b * f1 * g0 - c0 * e0 * g1 + b * f0 * g1 + c1 * d * h0 - a * f1 * h0 + c0 * d * h1 - a * f0 * h1 + a * e1 * i0 - b * d * i1 + a * e0 * i1,\n            -c0 * e0 * g0 + b * f0 * g0 + c0 * d * h0 - a * f0 * h0 - b * d * i0 + a * e0 * i0\n        );\n        poly.simplifyEquals();\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xp = new Polynomial(\n                c13.x,\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            );\n            xp.simplifyEquals();\n            const xRoots = xp.getRoots();\n            const yp = new Polynomial(\n                c13.y,\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            );\n            yp.simplifyEquals();\n            const yRoots = yp.getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (const yRoot of yRoots) {\n                            if (Math.abs(xRoot - yRoot) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Circle(p1, p2, p3, p4, c, r) {\n        return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n    }\n\n    /**\n     *  intersectBezier3Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Ellipse(p1, p2, p3, p4, ec, rx, ry) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Point2D(c.x, c.y);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const poly = new Polynomial(\n            c3.x * c3.x * ryry + c3.y * c3.y * rxrx,\n            2 * (c3.x * c2.x * ryry + c3.y * c2.y * rxrx),\n            2 * (c3.x * c1.x * ryry + c3.y * c1.y * rxrx) + c2.x * c2.x * ryry + c2.y * c2.y * rxrx,\n            2 * c3.x * ryry * (c0.x - ec.x) + 2 * c3.y * rxrx * (c0.y - ec.y) +\n                2 * (c2.x * c1.x * ryry + c2.y * c1.y * rxrx),\n            2 * c2.x * ryry * (c0.x - ec.x) + 2 * c2.y * rxrx * (c0.y - ec.y) +\n                c1.x * c1.x * ryry + c1.y * c1.y * rxrx,\n            2 * c1.x * ryry * (c0.x - ec.x) + 2 * c1.y * rxrx * (c0.y - ec.y),\n            c0.x * c0.x * ryry - 2 * c0.y * ec.y * rxrx - 2 * c0.x * ec.x * ryry +\n                c0.y * c0.y * rxrx + ec.x * ec.x * ryry + ec.y * ec.y * rxrx - rxrx * ryry\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const t of roots) {\n            result.points.push(\n                c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)))\n            );\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Line\n     *\n     *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n     *  sketch of the algorithm used here.  Without his help, I'm not sure when I\n     *  would have figured out this intersection problem.\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Line(p1, p2, p3, p4, a1, a2) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        // Start with Bezier using Bernstein polynomials for weighting functions:\n        //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n        //\n        // Expand and collect terms to form linear combinations of original Bezier\n        // controls.  This ends up with a vector cubic in t:\n        //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n        //             /\\                  /\\                /\\       /\\\n        //             ||                  ||                ||       ||\n        //             c3                  c2                c1       c0\n\n        // Calculate the coefficients\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Vector2D(c.x, c.y);\n\n        const c0 = new Vector2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // ?Rotate each cubic coefficient using line for new coordinate system?\n        // Find roots of rotated cubic\n        const roots = new Polynomial(\n            n.dot(c3),\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p5 = p1.lerp(p2, t);\n                const p6 = p2.lerp(p3, t);\n                const p7 = p3.lerp(p4, t);\n\n                const p8 = p5.lerp(p6, t);\n                const p9 = p6.lerp(p7, t);\n\n                const p10 = p8.lerp(p9, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p10\n                if (a1.x === a2.x) {\n                    if (min.y <= p10.y && p10.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p10.x && p10.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p10);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polygon(p1, p2, p3, p4, points) {\n        return Intersection.intersectBezier3Polyline(p1, p2, p3, p4, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier3Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polyline(p1, p2, p3, p4, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Rectangle(p1, p2, p3, p4, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n        const inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n        const inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleCircle\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} r1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleCircle(c1, r1, c2, r2) {\n        let result;\n\n        // Determine minimum and maximum radii where circles can intersect\n        const r_max = r1 + r2;\n        const r_min = Math.abs(r1 - r2);\n\n        // Determine actual distance between circle circles\n        const c_dist = c1.distanceFrom(c2);\n\n        if (c_dist > r_max) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (c_dist < r_min) {\n            result = new Intersection(\"Inside\");\n        }\n        else {\n            result = new Intersection(\"Intersection\");\n\n            const a = (r1 * r1 - r2 * r2 + c_dist * c_dist) / (2 * c_dist);\n            const h = Math.sqrt(r1 * r1 - a * a);\n            const p = c1.lerp(c2, a / c_dist);\n            const b = h / c_dist;\n\n            result.points.push(\n                new Point2D(\n                    p.x - b * (c2.y - c1.y),\n                    p.y + b * (c2.x - c1.x)\n                )\n            );\n            result.points.push(\n                new Point2D(\n                    p.x + b * (c2.y - c1.y),\n                    p.y - b * (c2.x - c1.x)\n                )\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleEllipse\n     *\n     *  @param {module:kld-intersections.Point2D} cc\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleEllipse(cc, r, ec, rx, ry) {\n        return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n    }\n\n    /**\n     *  intersectCircleLine\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleLine(c, r, a1, a2) {\n        let result;\n        const a = (a2.x - a1.x) * (a2.x - a1.x) +\n                 (a2.y - a1.y) * (a2.y - a1.y);\n        const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) +\n                       (a2.y - a1.y) * (a1.y - c.y));\n        const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y -\n                 2 * (c.x * a1.x + c.y * a1.y) - r * r;\n        const deter = b * b - 4 * a * cc;\n\n        if (deter < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (deter === 0) {\n            result = new Intersection(\"Tangent\");\n            // NOTE: should calculate this point\n        }\n        else {\n            const e = Math.sqrt(deter);\n            const u1 = (-b + e) / (2 * a);\n            const u2 = (-b - e) / (2 * a);\n\n            if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n                if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n\n                if (0 <= u1 && u1 <= 1) {\n                    result.points.push(a1.lerp(a2, u1));\n                }\n\n                if (0 <= u2 && u2 <= 1) {\n                    result.points.push(a1.lerp(a2, u2));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCirclePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolygon(c, r, points) {\n        return Intersection.intersectCirclePolyline(c, r, closePolygon(points));\n    }\n\n    /**\n     *  intersectCirclePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolyline(c, r, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n        let inter;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n\n            inter = Intersection.intersectCircleLine(c, r, a1, a2);\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleRectangle(c, r, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n        const inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n        const inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n        const inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter1.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseEllipse\n     *\n     *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.magic-software.com\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} rx1\n     *  @param {number} ry1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} rx2\n     *  @param {number} ry2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseEllipse(c1, rx1, ry1, c2, rx2, ry2) {\n        const a = [\n            ry1 * ry1, 0, rx1 * rx1, -2 * ry1 * ry1 * c1.x, -2 * rx1 * rx1 * c1.y,\n            ry1 * ry1 * c1.x * c1.x + rx1 * rx1 * c1.y * c1.y - rx1 * rx1 * ry1 * ry1\n        ];\n        const b = [\n            ry2 * ry2, 0, rx2 * rx2, -2 * ry2 * ry2 * c2.x, -2 * rx2 * rx2 * c2.y,\n            ry2 * ry2 * c2.x * c2.x + rx2 * rx2 * c2.y * c2.y - rx2 * rx2 * ry2 * ry2\n        ];\n\n        const yPoly = bezout(a, b);\n        const yRoots = yPoly.getRoots();\n        const epsilon = 1e-3;\n        const norm0 = (a[0] * a[0] + 2 * a[1] * a[1] + a[2] * a[2]) * epsilon;\n        const norm1 = (b[0] * b[0] + 2 * b[1] * b[1] + b[2] * b[2]) * epsilon;\n        const result = new Intersection(\"No Intersection\");\n\n        for (const yRoot of yRoots) {\n            const xPoly = new Polynomial(\n                a[0],\n                a[3] + yRoot * a[1],\n                a[5] + yRoot * (a[4] + yRoot * a[2])\n            );\n            const xRoots = xPoly.getRoots();\n\n            for (const xRoot of xRoots) {\n                let tst =\n                    (a[0] * xRoot + a[1] * yRoot + a[3]) * xRoot +\n                    (a[2] * yRoot + a[4]) * yRoot + a[5];\n                if (Math.abs(tst) < norm0) {\n                    tst =\n                        (b[0] * xRoot + b[1] * yRoot + b[3]) * xRoot +\n                        (b[2] * yRoot + b[4]) * yRoot + b[5];\n                    if (Math.abs(tst) < norm1) {\n                        result.appendPoint(new Point2D(xRoot, yRoot));\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseLine\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseLine(c, rx, ry, a1, a2) {\n        let result;\n        const orign = new Vector2D(a1.x, a1.y);\n        const dir = Vector2D.fromPoints(a1, a2);\n        const center = new Vector2D(c.x, c.y);\n        const diff = orign.subtract(center);\n        const mDir = new Vector2D(dir.x / (rx * rx), dir.y / (ry * ry));\n        const mDiff = new Vector2D(diff.x / (rx * rx), diff.y / (ry * ry));\n\n        const a = dir.dot(mDir);\n        const b = dir.dot(mDiff);\n        c = diff.dot(mDiff) - 1.0;\n        const d = b * b - a * c;\n\n        if (d < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (d > 0) {\n            const root = Math.sqrt(d); // eslint-disable-line no-shadow\n            const t_a = (-b - root) / a;\n            const t_b = (-b + root) / a;\n\n            if ((t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b)) {\n                if ((t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n                if (0 <= t_a && t_a <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_a));\n                }\n                if (0 <= t_b && t_b <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_b));\n                }\n            }\n        }\n        else {\n            const t = -b / a;\n\n            if (0 <= t && t <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.appendPoint(a1.lerp(a2, t));\n            }\n            else {\n                result = new Intersection(\"Outside\");\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipsePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolygon(c, rx, ry, points) {\n        return Intersection.intersectEllipsePolyline(c, rx, ry, closePolygon(points));\n    }\n\n    /**\n     *  intersectEllipsePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolyline(c, rx, ry, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseRectangle(c, rx, ry, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n        const inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n        const inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n        const inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineLine\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineLine(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n            const ub = ub_t / u_b;\n\n            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.points.push(\n                    new Point2D(\n                        a1.x + ua * (a2.x - a1.x),\n                        a1.y + ua * (a2.y - a1.y)\n                    )\n                );\n            }\n            else {\n                result = new Intersection(\"No Intersection\");\n            }\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLinePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolygon(a1, a2, points) {\n        return Intersection.intersectLinePolyline(a1, a2, closePolygon(points));\n    }\n\n    /**\n     *  intersectLinePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolyline(a1, a2, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineRectangle(a1, a2, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n        const inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n        const inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n        const inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolygonPolygon\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolygon(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), closePolygon(points2));\n    }\n\n    /**\n     *  intersectPolygonPolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolyline(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), points2);\n    }\n\n    /**\n     *  intersectPolygonRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonRectangle(points, r1, r2) {\n        return Intersection.intersectPolylineRectangle(closePolygon(points), r1, r2);\n    }\n\n    /**\n     *  intersectPolylinePolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylinePolyline(points1, points2) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points1;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points1[i];\n            const a2 = points1[i + 1];\n            const inter = Intersection.intersectLinePolyline(a1, a2, points2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolylineRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylineRectangle(points, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLinePolyline(min, topRight, points);\n        const inter2 = Intersection.intersectLinePolyline(topRight, max, points);\n        const inter3 = Intersection.intersectLinePolyline(max, bottomLeft, points);\n        const inter4 = Intersection.intersectLinePolyline(bottomLeft, min, points);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRectangleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRectangleRectangle(a1, a2, b1, b2) {\n        const min = a1.min(a2);\n        const max = a1.max(a2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n        const inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n        const inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n        const inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRayRay\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRayRay(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  appendPoint\n     *\n     *  @param {module:kld-intersections.Point2D} point\n     */\n    appendPoint(point) {\n        this.points.push(point);\n    }\n\n\n    /**\n     *  appendPoints\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     */\n    appendPoints(points) {\n        this.points = this.points.concat(points);\n    }\n}\n\nexport default Intersection;\n","/* eslint-disable prefer-rest-params */\n/**\n *  Shapes\n *\n *   @copyright 2017, Kevin Lindsey\n *   @module Shapes\n *   @deprecated use ShapeInfo\n */\n\nimport ShapeInfo from \"./ShapeInfo.js\";\n\n/**\n * Build shapes for intersection\n */\nclass Shapes {\n    /**\n     *  arc\n     *\n     *  @deprecated use ShapeInfo.arc\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @param {number} startRadians\n     *  @param {number} endRadians\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static arc(centerX, centerY, radiusX, radiusY, startRadians, endRadians) {\n        return ShapeInfo.arc(...arguments);\n    }\n\n    /**\n     *  quadraticBezier\n     *\n     *  @deprecated use ShapeInfo.quadraticBezier\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @param {number} p3x\n     *  @param {number} p3y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static quadraticBezier(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return ShapeInfo.quadraticBezier(...arguments);\n    }\n\n    /**\n     *  cubicBezier\n     *\n     *  @deprecated use ShapeInfo.cubicBezier\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @param {number} p3x\n     *  @param {number} p3y\n     *  @param {number} p4x\n     *  @param {number} p4y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static cubicBezier(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        return ShapeInfo.cubicBezier(...arguments);\n    }\n\n    /**\n     *  circle\n     *\n     *  @deprecated use ShapeInfo.circle\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radius\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(centerX, centerY, radius) {\n        return ShapeInfo.circle(...arguments);\n    }\n\n    /**\n     *  ellipse\n     *\n     *  @deprecated use ShapeInfo.ellipse\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(centerX, centerY, radiusX, radiusY) {\n        return ShapeInfo.ellipse(...arguments);\n    }\n\n    /**\n     *  line\n     *\n     *  @deprecated use ShapeInfo.line\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(p1x, p1y, p2x, p2y) {\n        return ShapeInfo.line(...arguments);\n    }\n\n    /**\n     *  path\n     *\n     *  @deprecated use ShapeInfo.path\n     *  @param {string} pathData\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(pathData) {\n        return ShapeInfo.path(...arguments);\n    }\n\n    /**\n     *  polygon\n     *\n     *  @deprecated use ShapeInfo.polygon\n     *  @param {Array<number>} coords\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(coords) {\n        return ShapeInfo.polygon(...arguments);\n    }\n\n    /**\n     *  polyline\n     *\n     *  @deprecated use ShapeInfo.polyline\n     *  @param {Array<number>} coords\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(coords) {\n        return ShapeInfo.polyline(...arguments);\n    }\n\n    /**\n     *  rectangle\n     *\n     *  @deprecated use ShapeInfo.rectangle\n     *  @param {number} x\n     *  @param {number} y\n     *  @param {number} width\n     *  @param {number} height\n     *  @param {number} [rx]\n     *  @param {number} [ry]\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rectangle(x, y, width, height, rx = 0, ry = 0) {\n        return ShapeInfo.rectangle(...arguments);\n    }\n}\n\nexport default Shapes;\n","/* eslint-disable prefer-rest-params */\n/**\n *   AffineShapes\n *\n *   @copyright 2017-2019, Kevin Lindsey\n *   @module AffineShapes\n *   @deprecated use ShapeInfo\n */\n\nimport ShapeInfo from \"./ShapeInfo.js\";\n\n/**\n * Build shapes for intersection\n */\nclass AffineShapes {\n    /**\n     *  arc\n     *\n     *  @deprecated use ShapeInfo.arc\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @param {number} startRadians\n     *  @param {number} endRadians\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static arc(center, radiusX, radiusY, startRadians, endRadians) {\n        return ShapeInfo.arc(...arguments);\n    }\n\n    /**\n     *  quadraticBezier\n     *\n     *   @deprecated use ShapeInfo.quadraticBezier\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static quadraticBezier(p1, p2, p3) {\n        return ShapeInfo.quadraticBezier(...arguments);\n    }\n\n    /**\n     *  cubicBezier\n     *\n     *  @deprecated use ShapeInfo.cubicBezier\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static cubicBezier(p1, p2, p3, p4) {\n        return ShapeInfo.cubicBezier(...arguments);\n    }\n\n    /**\n     *  circle\n     *\n     *  @deprecated use ShapeInfo.circle\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radius\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(center, radius) {\n        return ShapeInfo.circle(...arguments);\n    }\n\n    /**\n     *  ellipse\n     *\n     *  @deprecated use ShapeInfo.ellipse\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(center, radiusX, radiusY) {\n        return ShapeInfo.ellipse(...arguments);\n    }\n\n    /**\n     *  line\n     *\n     *  @deprecated use ShapeInfo.line\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(p1, p2) {\n        return ShapeInfo.line(...arguments);\n    }\n\n    /**\n     *  path\n     *\n     *  @deprecated use ShapeInfo.path\n     *  @param {string} pathData\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(pathData) {\n        return ShapeInfo.path(...arguments);\n    }\n\n    /**\n     *  polygon\n     *\n     *  @deprecated use ShapeInfo.polygon\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(points) {\n        return ShapeInfo.polygon(...arguments);\n    }\n\n    /**\n     *  polyline\n     *\n     *  @deprecated use ShapeInfo.polyline\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(points) {\n        return ShapeInfo.polyline(...arguments);\n    }\n\n    /**\n     *  rectangle\n     *\n     *  @deprecated use ShapeInfo.rectangle\n     *  @param {module:kld-intersections.Point2D} topLeft\n     *  @param {module:kld-intersections.Vector2D} size\n     *  @param {number} [rx]\n     *  @param {number} [ry]\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rectangle(topLeft, size, rx = 0, ry = 0) {\n        return ShapeInfo.rectangle(...arguments);\n    }\n}\n\nexport default AffineShapes;\n","/* eslint-disable no-restricted-syntax */\nimport {Point2D} from \"kld-affine\";\nimport ShapeInfo from \"./ShapeInfo.js\";\n\nclass SvgShapes {\n    /**\n     * circle\n     *\n     * @param {SVGCircleElement} circle\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(circle) {\n        if (circle instanceof SVGCircleElement === false) {\n            throw new TypeError(`Expected SVGCircleElement, but found ${circle}`);\n        }\n\n        const center = new Point2D(\n            circle.cx.baseVal.value,\n            circle.cy.baseVal.value\n        );\n        const radius = circle.r.baseVal.value;\n\n        return ShapeInfo.circle(center, radius);\n    }\n\n    /**\n     * ellipse\n     *\n     * @param {SVGEllipseElement} ellipse\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(ellipse) {\n        if (ellipse instanceof SVGEllipseElement === false) {\n            throw new TypeError(`Expected SVGEllipseElement, but found ${ellipse}`);\n        }\n\n        const center = new Point2D(\n            ellipse.cx.baseVal.value,\n            ellipse.cy.baseVal.value\n        );\n        const radiusX = ellipse.rx.baseVal.value;\n        const radiusY = ellipse.ry.baseVal.value;\n\n        return ShapeInfo.ellipse(center, radiusX, radiusY);\n    }\n\n    /**\n     * line\n     *\n     * @param {SVGLineElement} line\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(line) {\n        if (line instanceof SVGLineElement === false) {\n            throw new TypeError(`Expected SVGLineElement, but found ${line}`);\n        }\n\n        const p1 = new Point2D(\n            line.x1.baseVal.value,\n            line.y1.baseVal.value\n        );\n        const p2 = new Point2D(\n            line.x2.baseVal.value,\n            line.y2.baseVal.value\n        );\n\n        return ShapeInfo.line(p1, p2);\n    }\n\n    /**\n     * path\n     *\n     * @param {SVGPathElement} path\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(path) {\n        if (path instanceof SVGPathElement === false) {\n            throw new TypeError(`Expected SVGPathElement, but found ${path}`);\n        }\n\n        const pathData = path.getAttributeNS(null, \"d\");\n\n        return ShapeInfo.path(pathData);\n    }\n\n    /**\n     * polygon\n     *\n     * @param {SVGPolygonElement} polygon\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(polygon) {\n        if (polygon instanceof SVGPolygonElement === false) {\n            throw new TypeError(`Expected SVGPolygonElement, but found ${polygon}`);\n        }\n\n        const points = [];\n\n        for (let i = 0; i < polygon.points.numberOfItems; i++) {\n            const point = polygon.points.getItem(i);\n\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        return ShapeInfo.polygon(points);\n    }\n\n    /**\n     * polyline\n     *\n     * @param {SVGPolylineElement} polyline\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(polyline) {\n        if (polyline instanceof SVGPolylineElement === false) {\n            throw new TypeError(`Expected SVGPolylineElement, but found ${polyline}`);\n        }\n\n        const points = [];\n\n        for (let i = 0; i < polyline.points.numberOfItems; i++) {\n            const point = polyline.points.getItem(i);\n\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        return ShapeInfo.polyline(points);\n    }\n\n    /**\n     * rect\n     *\n     * @param {SVGRectElement} rect\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rect(rect) {\n        if (rect instanceof SVGRectElement === false) {\n            throw new TypeError(`Expected SVGRectElement, but found ${rect}`);\n        }\n\n        return ShapeInfo.rectangle(\n            rect.x.baseVal.value,\n            rect.y.baseVal.value,\n            rect.width.baseVal.value,\n            rect.height.baseVal.value,\n            rect.rx.baseVal.value,\n            rect.ry.baseVal.value\n        );\n    }\n\n    /**\n     * element\n     *\n     * @param {SVGElement} element\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static element(element) {\n        if (element instanceof SVGElement === false) {\n            throw new TypeError(`Expected SVGElement, but found ${element}`);\n        }\n\n        /* eslint-disable-next-line prefer-destructuring */\n        const tagName = element.tagName;\n\n        switch (tagName) {\n            case \"circle\":\n                return SvgShapes.circle(element);\n            case \"ellipse\":\n                return SvgShapes.ellipse(element);\n            case \"line\":\n                return SvgShapes.line(element);\n            case \"path\":\n                return SvgShapes.path(element);\n            case \"polygon\":\n                return SvgShapes.polygon(element);\n            case \"polyline\":\n                return SvgShapes.polyline(element);\n            case \"rect\":\n                return SvgShapes.rect(element);\n            default:\n                throw new TypeError(`Unrecognized element type: '${tagName}'`);\n        }\n    }\n}\n\nexport default SvgShapes;\n","/**\n *\n *  IntersectionQuery.js\n *\n *  @copyright 2017 Kevin Lindsey\n * @module IntersectionQuery\n */\n\nimport {Vector2D} from \"kld-affine\";\n\n/**\n * @namespace\n */\nconst IntersectionQuery = {};\n\n\n/**\n *  pointInCircle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radius\n *  @returns {boolean}\n */\nIntersectionQuery.pointInCircle = function(point, center, radius) {\n    const v = Vector2D.fromPoints(center, point);\n\n    return v.length() <= radius;\n};\n\n\n/**\n *  pointInEllipse\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {boolean}\n */\nIntersectionQuery.pointInEllipse = function(point, center, radiusX, radiusY) {\n    const len = point.subtract(center);\n\n    return (len.x * len.x) / (radiusX * radiusX) + (len.y * len.y) / (radiusY * radiusY) <= 1;\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {boolean}\n */\nIntersectionQuery.pointInPolyline = function(point, points) {\n    const {length: len} = points;\n    let counter = 0;\n    let xInter;\n\n    let p1 = points[0];\n\n    for (let i = 1; i <= len; i++) {\n        const p2 = points[i % len];\n        const minY = Math.min(p1.y, p2.y);\n        const maxY = Math.max(p1.y, p2.y);\n        const maxX = Math.max(p1.x, p2.x);\n\n        if (p1.y !== p2.y && minY < point.y && point.y <= maxY && point.x <= maxX) {\n            xInter = (point.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;\n\n            if (p1.x === p2.x || point.x <= xInter) {\n                counter++;\n            }\n        }\n\n        p1 = p2;\n    }\n\n    return (counter % 2 === 1);\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolygon = IntersectionQuery.pointInPolyline;\n\n\n/**\n *  pointInRectangle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} topLeft\n *  @param {module:kld-intersections.Point2D} bottomRight\n *  @returns {boolean}\n */\nIntersectionQuery.pointInRectangle = function(point, topLeft, bottomRight) {\n    return (\n        topLeft.x <= point.x && point.x < bottomRight.x &&\n        topLeft.y <= point.y && point.y < bottomRight.y\n    );\n};\n\n\nexport default IntersectionQuery;\n"],"names":["Point2D","x","y","this","constructor","that","scalar","precision","Math","abs","t","omt","dx","dy","sqrt","min","max","matrix","a","c","e","b","d","f","Vector2D","divide","length","cos","dot","radians","acos","cross","subtract","project","percent","multiply","p1","p2","Matrix2D","isIdentity","det1","Error","idet","det2","det3","tx","ty","scale","center","scaleX","scaleY","s","sin","cx","cy","vector","unit","tan","E","F","G","H","Q","R","a1","atan2","a2","theta","phi","translation","rotation","nonUniformScaling","rotation0","sign","NaN","IDENTITY","Polynomial","coefs","i","arguments","push","_variable","_s","poly","slice","isNaN","TypeError","result","d1","getDegree","d2","dmax","v1","v2","j","TOLERANCE","pop","err","reduce","pv","cv","divideEqualsScalar","signs","value","round","signString","ACCURACY","minValue","eval","maxValue","tmp1","log","tmp2","LN10","maxIterations","ceil","LN2","n","range","iter","delta","sum","st","os","ost","Array","MAX","h","trapezoid","interpolate","maxAbsX","rb","bounds","minX","maxX","an","m","v","nm","pow","map","coefSelectionFunc","find2Max","acc","bi","nearmax","max_nearmax_pos","negX","posX","reverse","res","boundsUpperRealFujiwara","urb","boundsLowerRealFujiwara","prev","curr","undersqrt","accum","ai","prev_a","pos","neg","maxRealPos","maxRealNeg","minComplex","derivative","simplifyEquals","getLinearRoot","getQuadraticRoots","getCubicRoots","getQuarticRoots","roots","RangeError","bisection","droots","getDerivative","getRootsInInterval","results","c3","c2","c1","offset","discrim","halfB","ZEROepsilon","zeroErrorEstimate","root","tmp","distance","angle","sqrt3","poly_d","derrt","getRoots","sort","dery","nr","maxabsX","guesses","minmax","df","newtonSecantBisection","concat","xs","ys","ns","diff","dift","ho","hp","w","den","x0","max_iterations","dfx","x_correction","x_new","y_atmin","y_atmax","prev_dfx","prev_x_ef_correction","min_correction_factor","isBounded","isEnoughCorrection","parser","o","k","l","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","$Vp","$Vq","$Vr","$Vs","$Vt","$Vu","$Vv","$Vw","$Vx","$Vy","$Vz","$VA","$VB","$VC","$VD","$VE","$VF","$VG","$VH","$VI","$VJ","$VK","$VL","$VM","$VN","$VO","$VP","$VQ","$VR","$VS","$VT","$VU","$VV","$VW","$VX","$VY","$VZ","$V_","$V$","$V01","$V11","$V21","$V31","$V41","$V51","$V61","$V71","$V81","$V91","$Va1","$Vb1","$Vc1","$Vd1","$Ve1","$Vf1","$Vg1","$Vh1","$Vi1","$Vj1","$Vk1","$Vl1","$Vm1","$Vn1","$Vo1","trace","yy","symbols_","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","type","name","steps","patterns","sequences","left","right","args","undefined","expression","assignTo","patternType","pattern","start","stop","elements","Infinity","substring","parseInt","parseFloat","table","defaultActions","parseError","str","hash","recoverable","error","parse","input","self","stack","tstack","lstack","recovering","EOF","call","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","lex","token","yyval","errStr","TERROR","showPosition","join","text","match","line","loc","vstack","first_line","last_line","first_column","last_column","apply","_input","_more","_backtrack","done","matched","conditionStack","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","flex","begin","condition","popState","conditions","topState","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","isObject","item","_typeof","isArray","list","lists","missing","every","maxLength","part","items","count","advance","comparator","delimiter","keys","values","entries","pairs","pair","key","assign","FAILURE_VALUE","obj","Transformer","symbolTable","functions","messages","verbose","StdLib","reference","message","level","source","structure","statements","statement","executeExpression","addError","binOp","typeName","operation","_this","seqValue","invokeFunction","object","array","sequence","sequenceSymbolTable","currentObject","step","executePattern","valueGenerator","transform","mapSymbolTable","patternSymbolTable","arg","element","executeObjectExpression","objectSymbolTable","executeArrayPattern","property","propertyPattern","referencedPattern","executeArrayPatternElement","executeArrayElementPattern","executeArrayElementGroupPattern","actualIndex","pushAssign","group","groupResults","elementSymbolTable","addWarning","PathLexeme","UNDEFINED","COMMAND","NUMBER","EOD","PathLexer","pathData","setPathData","_pathData","RegExp","$1","SyntaxError","PathParser","_lexer","_handler","beginParse","mode","lastToken","getNextToken","typeis","parameterCount","params","PARAMCOUNT","toUpperCase","handler","methodName","METHODNAME","endParse","A","C","L","M","S","T","V","Z","q","z","TWO_PI","PI","getArcParameters","startPoint","endPoint","rx","ry","arcFlag","sweepFlag","halfDiff","x1p","y1p","x1px1p","y1py1p","lambda","factor","rxrx","ryry","rxy1","ryx1","sq","normal","mid","add","cxp","cyp","xcr1","xcr2","ycr1","ycr2","theta1","angleBetween","deltaTheta","PathHandler","shapeCreator","shapes","firstX","firstY","lastX","lastY","lastCommand","shape","xAxisRotation","addShape","arcParameters","arc","x1","y1","x2","y2","cubicBezier","quadraticBezier","controlX","controlY","secondToLast","degree90","ShapeInfo","ARC","QUADRATIC_BEZIER","CUBIC_BEZIER","CIRCLE","ELLIPSE","LINE","PATH","POLYGON","POLYLINE","RECTANGLE","p1x","p1y","p2x","p2y","width","height","y0","x3","y3","segments","properties","transformType","data","transformer","execute","JSON","stringify","addFunction","setHandler","parseData","UNIT_X","isNullish","normalizeAngle","restrictPointsToArc","intersections","radiusX","radiusY","startRadians","endRadians","points","Intersection","startNormal","endNormal","fromPoints","appendPoint","status","closePolygon","copy","init","point","shape1","shape2","intersectPathShape","intersectArcShape","method","path","segment","inter","intersect","appendPoints","ellipse","a3","b1","b2","b3","c12","c11","c10","c22","c21","c20","g","xp","xRoots","yp","yRoots","checkRoots","xRoot","yRoot","b4","c23","c10x2","c10y2","c11x2","c11y2","c12x2","c12y2","c20x2","c20y2","c21x2","c21y2","c22x2","c22y2","c23x2","c23y2","p3","intersectBezier2Ellipse","ec","c0","cl","p4","lerp","p5","p6","intersectBezier2Polyline","intersectBezier2Line","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","a4","c13","e0","e1","e2","e3","f0","f1","f2","f3","g0","g1","g2","g3","h0","h1","h2","h3","i0","i1","i2","i3","intersectBezier3Ellipse","p7","p8","p9","p10","intersectBezier3Polyline","intersectBezier3Line","r_max","r_min","c_dist","distanceFrom","cc","intersectEllipseEllipse","deter","u1","u2","intersectCirclePolyline","intersectCircleLine","rx1","ry1","rx2","ry2","AB","AC","AD","AE","AF","BC","BE","BF","CD","DE","DF","BFpDE","BEmCD","norm0","norm1","tst","orign","dir","mDir","mDiff","t_a","t_b","intersectEllipsePolyline","intersectEllipseLine","ua_t","ub_t","u_b","ua","ub","intersectLinePolyline","intersectLineLine","points1","points2","intersectPolylinePolyline","intersectPolylineRectangle","intersectLineRectangle","Shapes","centerX","centerY","p3x","p3y","p4x","p4y","radius","circle","coords","polygon","polyline","rectangle","AffineShapes","topLeft","size","SvgShapes","SVGCircleElement","baseVal","SVGEllipseElement","SVGLineElement","SVGPathElement","getAttributeNS","SVGPolygonElement","numberOfItems","getItem","SVGPolylineElement","rect","SVGRectElement","SVGElement","tagName","IntersectionQuery","xInter","counter","minY","maxY","pointInPolygon","pointInPolyline","pointInRectangle","bottomRight"],"mappings":"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CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,GAAGC,EAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,G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"}